[{"name":"app.R","content":"##### SETUP #####\r\n## this code runs on the client at execution\r\n# load packages\r\nlibrary(shiny)\r\nlibrary(ggplot2)\r\nlibrary(showtext)\r\nlibrary(scico)\r\nlibrary(bslib)\r\nlibrary(bsicons)\r\nlibrary(DT)\r\nlibrary(MuMIn)\r\nlibrary(lmerTest)\r\n\r\n# graphics\r\np_palettes <- scico_palette_names()\r\nfont_sizes <- c(20,16,14)\r\nfont_add_google(\"Open Sans\", family = \"open\")\r\nfont_add_google(\"Montserrat\", family = \"mont\")\r\nshowtext_auto()\r\n\r\n# distributions\r\n## currently only continuous distributions are supported\r\ndists <- c(\"normal\", \"lognormal\", \"gamma\", \"exponential\")\r\n\r\n# load data\r\nload(\"data_gsw.RData\")\r\nload(\"data_fruit.RData\")\r\nload(\"data_ps2.RData\")\r\n\r\n## preload vars\r\n### kind of a funky way of doing this, but it makes it REALLY easy to check if a variable\r\n### is continuous or discrete later with [if (var %in% vars_d)]\r\ngsw_vars <- c(\"DaysFromGermination\", \"AmbientHumidity\", \"AmbientPressure\", \"AmbientTemperature\", \"AmbientLight\", \"LeafTemperature\", \"gsw\")\r\ngsw_vars_d <- c(\"Treatment\", \"Transplantation\", \"Germination\", \"Row\", \"Pot\", \"Plant\", \"Time\", \"Date\")\r\nall_gsw_vars <- c(gsw_vars_d, gsw_vars)\r\nps2_vars <- c(\"DaysFromGermination\", \"AmbientHumidity\", \"AmbientPressure\", \"AmbientTemperature\", \"AmbientLight\", \"LeafTemperature\", \"PhiPS2\", \"LogitPhiPS2\")\r\nps2_vars_d <- c(\"Treatment\", \"Transplantation\", \"Germination\", \"Row\", \"Pot\", \"Plant\", \"Device\", \"Time\", \"Date\")\r\nall_ps2_vars <- c(ps2_vars_d, ps2_vars)\r\nfruit_vars <- c(\"DateHarvest\", \"DateAnalysis\", \"DaysFromHarvestToAnalysis\", \"DaysFromGermination\", \"Mass\", \"Ripeness\", \"SugarAvg\", \"SugarGrams\")\r\nfruit_vars_d <- c(\"Treatment\", \"Transplantation\", \"Germination\", \"Row\", \"Pot\", \"Plant\", \"BER\")\r\nall_fruit_vars <- c(fruit_vars_d, fruit_vars)\r\n\r\n# custom functions\r\n## i *think* this is faster and smaller than including these as a dependency via a custom package\r\nmultiKS_cont <- function(var, distributions) {\r\n  # check if \"all\" was passed to distributions\r\n  if (\"all\" %in% distributions) {\r\n    distributions <- c(\"normal\",\r\n                       \"lognormal\",\r\n                       \"gamma\",\r\n                       \"exponential\")\r\n  }\r\n  KS_df <- data.frame(matrix(ncol=3, nrow=0))\r\n  colnames(KS_df) <- c(\"Distribution\", \"Distance\", \"P-Value\")\r\n  # check normal\r\n  if (\"normal\" %in% distributions) {\r\n    var_n <- MASS::fitdistr(var, \"normal\")\r\n    var_KS_n <- ks.test(var, \"pnorm\", mean=var_n$estimate[1],\r\n                        sd = var_n$estimate[2])\r\n    KS_n <- data.frame(matrix(ncol=0, nrow=1))\r\n    KS_n$Distribution <- \"Normal\"\r\n    KS_n$Distance <- if (!is.null(var_KS_n$statistic)) {var_KS_n$statistic}\r\n    else {\"NA\"}\r\n    KS_n$PValue <- if (!is.null(var_KS_n$p.value)) {var_KS_n$p.value}\r\n    else {\"NA\"}\r\n    KS_df <- rbind(KS_df, KS_n)\r\n  }\r\n  if (\"lognormal\" %in% distributions) {\r\n    var_ln <- MASS::fitdistr(var, \"lognormal\")\r\n    var_KS_ln <- ks.test(var, \"plnorm\",\r\n                         meanlog=var_ln$estimate[1],\r\n                         sdlog = var_ln$estimate[2])[c(1, 2)]\r\n    KS_ln <- data.frame(matrix(ncol=0, nrow=1))\r\n    KS_ln$Distribution <- \"Lognormal\"\r\n    KS_ln$Distance <- if (!is.null(var_KS_ln$statistic)) {var_KS_ln$statistic}\r\n    else {\"NA\"}\r\n    KS_ln$PValue <- if (!is.null(var_KS_ln$p.value)) {var_KS_ln$p.value}\r\n    else {\"NA\"}\r\n    KS_df <- rbind(KS_df, KS_ln)\r\n  }\r\n  if (\"gamma\" %in% distributions) {\r\n    var_g <- MASS::fitdistr(var, \"gamma\")\r\n    var_KS_g <- ks.test(var, \"pgamma\",\r\n                        shape=var_g$estimate[1],\r\n                        rate=var_g$estimate[2])\r\n    KS_g <- data.frame(matrix(ncol=0, nrow=1))\r\n    KS_g$Distribution <- \"Gamma\"\r\n    KS_g$Distance <- if (!is.null(var_KS_g$statistic)) {var_KS_g$statistic}\r\n    else {\"NA\"}\r\n    KS_g$PValue <- if (!is.null(var_KS_g$p.value)) {var_KS_g$p.value}\r\n    else {\"NA\"}\r\n    KS_df <- rbind(KS_df, KS_g)\r\n  }\r\n  if (\"exponential\" %in% distributions) {\r\n    var_exp <- MASS::fitdistr(var, \"exponential\")\r\n    var_KS_exp <- ks.test(var, \"pexp\", rate = var_exp$estimate)\r\n    KS_exp <- data.frame(matrix(ncol=0, nrow=1))\r\n    KS_exp$Distribution <- \"Exponential\"\r\n    KS_exp$Distance <- if (!is.null(var_KS_exp$statistic)) {var_KS_exp$statistic}\r\n    else {\"NA\"}\r\n    KS_exp$PValue <- if (!is.null(var_KS_exp$p.value)) {var_KS_exp$p.value}\r\n    else {\"NA\"}\r\n    KS_df <- rbind(KS_df, KS_exp)\r\n  }\r\n  \r\n  KS_df$Distribution = as.factor(KS_df$Distribution)\r\n  KS_df$Distance = as.numeric(KS_df$Distance)\r\n  KS_df$PValue = as.numeric(format(as.numeric(KS_df$PValue),\r\n                                   scientific = FALSE))\r\n  KS_df$Distance <- round(KS_df$Distance, 3)\r\n  KS_df$PValue <- round(KS_df$PValue, 3)\r\n  \r\n  return(KS_df)\r\n}\r\nmultiCDF_cont <- function(var, seq_length = 50, distributions = \"all\"){\r\n  # get a sequence from the minimum to maximum of x with length\r\n  #equal to seq_length + 1\r\n  var_seq <- seq(min(var), max(var), length.out = seq_length+1)\r\n  # create real cumulative density for x\r\n  var_cdf <- ecdf(var)(var_seq)\r\n  # initialize df of x and the cumulative density\r\n  cdf_df <- as.data.frame(var_seq)\r\n  cdf_df$dens = var_cdf\r\n  if (\"all\" %in% distributions) {\r\n    distributions <- c(\"normal\",\r\n                       \"lognormal\",\r\n                       \"gamma\",\r\n                       \"exponential\")\r\n  }\r\n  \r\n  if (\"normal\" %in% distributions) {\r\n    var_n <- MASS::fitdistr(var, \"normal\")\r\n    var_cdf_n <- pnorm(var_seq, mean=var_n$estimate[1],\r\n                       sd = var_n$estimate[2])\r\n    cdf_df$cdf_normal = var_cdf_n\r\n  }\r\n  if (\"lognormal\" %in% distributions) {\r\n    var_ln <- MASS::fitdistr(var, \"lognormal\")\r\n    var_cdf_ln <- plnorm(var_seq, meanlog=var_ln$estimate[1],\r\n                         sdlog = var_ln$estimate[2])\r\n    cdf_df$cdf_lognormal = var_cdf_ln\r\n  }\r\n  if (\"gamma\" %in% distributions) {\r\n    var_g <- MASS::fitdistr(var, \"gamma\")\r\n    var_cdf_g <- pgamma(var_seq, shape=var_g$estimate[1],\r\n                        rate=var_g$estimate[2])\r\n    cdf_df$cdf_gamma = var_cdf_g\r\n  }\r\n  if (\"exponential\" %in% distributions) {\r\n    var_exp <- MASS::fitdistr(var, \"exponential\")\r\n    var_cdf_exp <- pexp(var_seq, rate = var_exp$estimate)\r\n    cdf_df$cdf_exponential = var_cdf_exp\r\n  }\r\n  \r\n  return(cdf_df)\r\n}\r\nmultiPDF_cont <- function(var, seq_length = 50, distributions = \"all\"){\r\n  # get a sequence from the minimum to maximum of x with length\r\n  #equal to seq_length + 1\r\n  var_seq <- seq(min(var), max(var), length.out = seq_length+1)\r\n  # create real density for x\r\n  var_pdf <- density(var, n=seq_length+1)\r\n  # initialize df of x and the real density\r\n  pdf_df <- as.data.frame(var_seq)\r\n  pdf_df$dens = var_pdf$y\r\n  ## see if \"all\" is in distributions\r\n  if (\"all\" %in% distributions) {\r\n    distributions <- c(\"normal\", \"lognormal\", \"gamma\", \"exponential\")\r\n  }\r\n  \r\n  if (\"normal\" %in% distributions) {\r\n    var_n <- MASS::fitdistr(var, \"normal\")\r\n    var_pdf_n <- dnorm(var_seq, mean=var_n$estimate[1],\r\n                       sd = var_n$estimate[2])\r\n    pdf_df$pdf_normal = var_pdf_n\r\n  }\r\n  if (\"lognormal\" %in% distributions) {\r\n    var_ln <- MASS::fitdistr(var, \"lognormal\")\r\n    var_pdf_ln <- dlnorm(var_seq, meanlog=var_ln$estimate[1],\r\n                         sdlog = var_ln$estimate[2])\r\n    pdf_df$pdf_lognormal = var_pdf_ln\r\n  }\r\n  if (\"gamma\" %in% distributions) {\r\n    var_g <- MASS::fitdistr(var, \"gamma\")\r\n    var_pdf_g <- dgamma(var_seq, shape=var_g$estimate[1],\r\n                        rate=var_g$estimate[2])\r\n    pdf_df$pdf_gamma = var_pdf_g\r\n  }\r\n  if (\"exponential\" %in% distributions) {\r\n    var_exp <- MASS::fitdistr(var, \"exponential\")\r\n    var_pdf_exp <- dexp(var_seq, rate = var_exp$estimate)\r\n    pdf_df$pdf_exponential = var_pdf_exp\r\n  }\r\n  ## return dataframe with pdfs\r\n  return(pdf_df)\r\n}\r\nmultiPDF_plot <- function (var, seq_length = 50, distributions = \"all\", palette = \"oslo\", var_name = NULL) {\r\n  # check if \"all\" was passed to distributions\r\n  if (\"all\" %in% distributions) {\r\n    distributions <- c(\"normal\",\r\n                       \"lognormal\",\r\n                       \"gamma\",\r\n                       \"exponential\")\r\n  }\r\n  # calculate PDFs\r\n  data <- multiPDF_cont(var, seq_length, distributions)\r\n  if (is.null(var_name)) {\r\n    var_name <- unlist(strsplit(deparse(substitute(var)), split=\"[$]\"))[2]\r\n  }\r\n  # create plot with real density\r\n  p <- ggplot2::ggplot(data) +\r\n    ggplot2::geom_line(aes(x=var_seq, y=dens, color=\"Real Density\"), linetype = 2, linewidth = 3)+\r\n    ggplot2::xlab(var_name)+\r\n    ggplot2::ylab(\"PDF\")+\r\n    ggplot2::labs(title=paste(\"PDF plot for\", var_name, \"over selected distributions\"))+\r\n    ggplot2::guides(color=guide_legend(title=\"Distribution\"))+\r\n    ggplot2::theme_bw()\r\n  # check for each type of distribution in the distributions, and add it if present\r\n  if (\"normal\" %in% distributions == TRUE) {\r\n    p <- p + ggplot2::geom_line(aes(x=var_seq, y=pdf_normal, color='Normal'), linewidth = 2)\r\n  }\r\n  if (\"lognormal\" %in% distributions == TRUE) {\r\n    p <- p + ggplot2::geom_line(aes(x= var_seq, y=pdf_lognormal, color='Lognormal'), linewidth = 2)\r\n  }\r\n  if (\"gamma\" %in% distributions == TRUE) {\r\n    p <- p + ggplot2::geom_line(aes(x= var_seq, y=pdf_gamma, color='Gamma'), linewidth = 2)\r\n  }\r\n  if (\"exponential\" %in% distributions == TRUE) {\r\n    p <- p + ggplot2::geom_line(aes(x= var_seq, y=pdf_exponential, color='Exponential'), linewidth = 2)\r\n  }\r\n  p <- p +\r\n    scico::scale_color_scico_d(begin=0.9, end=0.1, palette = palette)+\r\n    ggplot2::theme(\r\n      text = ggplot2::element_text(size=10, family=\"mont\"),\r\n      title = ggplot2::element_text(size=14, family = \"open\", face = \"bold\"),\r\n      legend.position=\"bottom\",\r\n      legend.title.position = \"top\",\r\n      legend.title = ggplot2::element_text(size=12, family = \"open\", face= \"bold\"),\r\n      axis.title = ggplot2::element_text(size=12, family = \"open\", face= \"bold\"),\r\n    )\r\n  return(p)\r\n}\r\nmultiCDF_plot <- function (var, seq_length = 50, distributions = \"all\", palette = \"oslo\", var_name = NULL) {\r\n  # check if \"all\" was passed to distributions\r\n  if (\"all\" %in% distributions) {\r\n    distributions <- c(\"normal\",\r\n                       \"lognormal\",\r\n                       \"gamma\",\r\n                       \"exponential\")\r\n  }\r\n  # calculate CDFs\r\n  data <- multiCDF_cont(var, seq_length, distributions)\r\n  # if var_name is not provided, get it from the input variable\r\n  if (is.null(var_name)) {\r\n    var_name <- unlist(strsplit(deparse(substitute(var)), split=\"[$]\"))[2]\r\n  }\r\n  # create plot with real density\r\n  p <- ggplot2::ggplot(data) +\r\n    ggplot2::geom_line(aes(x=var_seq, y=dens, color=\"Real Distribution\"), linetype = 2, linewidth = 3)+\r\n    ggplot2::xlab(var_name)+\r\n    ggplot2::ylab(\"CDF\")+\r\n    ggplot2::labs(title=paste(\"CDF plot for\", var_name, \"over selected distributions\"))+\r\n    ggplot2::guides(color=guide_legend(title=\"Distribution\"))+\r\n    ggplot2::theme_bw()\r\n  # check for each type of distribution in the distributions, and add it if present\r\n  if (\"normal\" %in% distributions == TRUE) {\r\n    p <- p + ggplot2::geom_line(aes(x=var_seq, y=cdf_normal, color='Normal'), linewidth = 2)\r\n  }\r\n  if (\"lognormal\" %in% distributions == TRUE) {\r\n    p <- p + ggplot2::geom_line(aes(x=var_seq, y=cdf_lognormal, color='Lognormal'), linewidth = 2)\r\n  }\r\n  if (\"gamma\" %in% distributions == TRUE) {\r\n    p <- p + ggplot2::geom_line(aes(x=var_seq, y=cdf_gamma, color='Gamma'), linewidth = 2)\r\n  }\r\n  if (\"exponential\" %in% distributions == TRUE) {\r\n    p <- p + ggplot2::geom_line(aes(x=var_seq, y=cdf_exponential, color='Exponential'), linewidth = 2)\r\n  }\r\n  p <- p +\r\n    scico::scale_color_scico_d(begin=0.9, end=0.1, palette = palette)+\r\n    ggplot2::theme(\r\n      text = ggplot2::element_text(size=10, family=\"mont\"),\r\n      title = ggplot2::element_text(size=14, family = \"open\", face = \"bold\"),\r\n      legend.position=\"bottom\",\r\n      legend.title.position = \"top\",\r\n      legend.title = ggplot2::element_text(size=12, family = \"open\", face= \"bold\"),\r\n      axis.title = ggplot2::element_text(size=12, family = \"open\", face= \"bold\"),\r\n    )\r\n  return(p)\r\n}\r\npredict_plot <- function(mod, data, rvar, pvar, group = NULL, length = 50, interval = \"confidence\", correction = \"normal\") {\r\n  if (!is.null(data[[deparse(substitute(group))]])){ ## grouped prediciton plot\r\n    ### deparse variables\r\n    d_pvar <- deparse(substitute(pvar))\r\n    d_rvar <- deparse(substitute(rvar))\r\n    d_group  <- deparse(substitute(group))\r\n    ### get explicit names  of deparsed variables\r\n    ### weird, but necessary for renaming the newdata (dx) columns \\>_>/\r\n    pvar_name <- colnames(data[d_pvar])\r\n    rvar_name <- colnames(data[d_rvar])\r\n    group_name  <- colnames(data[d_group])\r\n    ## get group data ready\r\n    groups  <- sort(unique(data[[d_group]]))\r\n    ngroups <- length(groups)\r\n    ## get predictor range for each group\r\n    agg <- aggregate(data[[d_pvar]] ~ data[[d_group]], data = data, range)\r\n    dx_pvar <- data.frame(pvar = numeric(0))\r\n    for (i in 1:ngroups) {\r\n      tpvar <- data.frame(pvar = seq(agg[[2]][i,1], agg[[2]][i,2], length = length))\r\n      dx_pvar <- rbind(dx_pvar, tpvar)\r\n    }\r\n    dx <- data.frame(group = rep(agg[[1]], each = length),\r\n                     pvar = dx_pvar)\r\n    colnames(dx) <- c(group_name, pvar_name)\r\n    ## make prediction\r\n    if (interval == \"confidence\") {\r\n      ### we don't need to explicitly declare that it's a confidence interval, the predict function defaults to it\r\n      pred <- predict(mod, newdata = dx, se.fit = TRUE, type = \"response\")\r\n      ### check for correction type\r\n      if (correction == \"exponential\") {\r\n        dx$mn <- exp(qnorm(0.5,   pred$fit, pred$se.fit))\r\n        dx$lo <- exp(qnorm(0.025, pred$fit, pred$se.fit))\r\n        dx$up <- exp(qnorm(0.975, pred$fit, pred$se.fit))\r\n      } else if (correction == \"logit\") {\r\n        dx$mn <- plogis(qnorm(0.5,   pred$fit, pred$se.fit))\r\n        dx$lo <- plogis(qnorm(0.025, pred$fit, pred$se.fit))\r\n        dx$up <- plogis(qnorm(0.975, pred$fit, pred$se.fit))\r\n      } else {\r\n        dx$mn <- qnorm(0.5,   pred$fit, pred$se.fit)\r\n        dx$lo <- qnorm(0.025, pred$fit, pred$se.fit)\r\n        dx$up <- qnorm(0.975, pred$fit, pred$se.fit)\r\n      }\r\n    } else { ### end confidence interval\r\n      pred <- predict(mod, newdata = dx, se.fit = TRUE,\r\n                      type = \"response\", interval = \"prediction\")\r\n      ### check for correction type\r\n      if (correction == \"exponential\") {\r\n        dx$mn <- exp(pred$fit[,\"fit\"])\r\n        dx$lo <- exp(pred$fit[,\"lwr\"])\r\n        dx$up <- exp(pred$fit[,\"upr\"])\r\n      } else if (correction == \"logit\") {\r\n        dx$mn <- plogis(pred$fit[,\"fit\"])\r\n        dx$lo <- plogis(pred$fit[,\"lwr\"])\r\n        dx$up <- plogis(pred$fit[,\"upr\"])\r\n      } else {\r\n        dx$mn <- pred$fit[,\"fit\"]\r\n        dx$lo <- pred$fit[,\"lwr\"]\r\n        dx$up <- pred$fit[,\"upr\"]\r\n      }\r\n    } ### end prediction interval\r\n    ## initialize plot with real data\r\n    p <- ggplot2::ggplot() + \r\n      ggplot2::geom_point(data = data, ggplot2::aes(x=.data[[d_pvar]], y=.data[[d_rvar]], color=.data[[d_group]]))\r\n    ## loop through treatments\r\n    for (g in 1:ngroups) {\r\n      flag <- which(dx[[d_group]] == groups[g])\r\n      tdx <- dx[flag,]\r\n      p <- p + \r\n        ggplot2::geom_line(data=tdx, ggplot2::aes(x=.data[[d_pvar]], y=lo, color = .data[[d_group]]),\r\n                           linewidth=1, show.legend=FALSE)+\r\n        ggplot2::geom_line(data=tdx, ggplot2::aes(x=.data[[d_pvar]], y=mn, color = .data[[d_group]]),\r\n                           linewidth=2, show.legend=FALSE)+\r\n        ggplot2::geom_line(data=tdx, ggplot2::aes(x=.data[[d_pvar]], y=up, color = .data[[d_group]]),\r\n                           linewidth=1, show.legend=FALSE)+\r\n        ggplot2::geom_ribbon(data=tdx, ggplot2::aes(x=.data[[d_pvar]], ymin=lo, ymax=up,\r\n                                                    fill=.data[[d_group]]), alpha = 0.5)\r\n    }\r\n  } else { ### non-grouped prediction plot\r\n    ### deparse variables\r\n    d_pvar <- deparse(substitute(pvar))\r\n    d_rvar <- deparse(substitute(rvar))\r\n    ### get explicit names  of deparsed variables\r\n    ### weird, but necessary for renaming the newdata (dx) columns \\>_>/\r\n    pvar_name <- colnames(data[d_pvar])\r\n    rvar_name <- colnames(data[d_rvar])\r\n    ## get predictor range\r\n    dx_pvar <- seq(min(data[[d_pvar]]), max(data[[d_pvar]]), length)\r\n    dx <- data.frame(pvar = dx_pvar)\r\n    colnames(dx) <- pvar_name\r\n    ## make prediction\r\n    if (interval == \"confidence\") { ### confidence interval\r\n      ### we don't need to explicitly declare that it's a confidence interval, the predict function defaults to it\r\n      pred <- predict(mod, newdata = dx, se.fit = TRUE, type = \"response\")\r\n      ### check for correction type\r\n      if (correction == \"exponential\") {\r\n        dx$mn <- exp(qnorm(0.5,   pred$fit, pred$se.fit))\r\n        dx$lo <- exp(qnorm(0.025, pred$fit, pred$se.fit))\r\n        dx$up <- exp(qnorm(0.975, pred$fit, pred$se.fit))\r\n      } else if (correction == \"logit\") {\r\n        dx$mn <- plogis(qnorm(0.5,   pred$fit, pred$se.fit))\r\n        dx$lo <- plogis(qnorm(0.025, pred$fit, pred$se.fit))\r\n        dx$up <- plogis(qnorm(0.975, pred$fit, pred$se.fit))\r\n      } else {\r\n        dx$mn <- qnorm(0.5,   pred$fit, pred$se.fit)\r\n        dx$lo <- qnorm(0.025, pred$fit, pred$se.fit)\r\n        dx$up <- qnorm(0.975, pred$fit, pred$se.fit)\r\n      }\r\n    } else { ### prediction interval\r\n      pred <- predict(mod, newdata = dx, se.fit = TRUE,\r\n                      type = \"response\", interval = \"prediction\")\r\n      ### check for correction type\r\n      if (correction == \"exponential\") {\r\n        dx$mn <- exp(pred$fit[,\"fit\"])\r\n        dx$lo <- exp(pred$fit[,\"lwr\"])\r\n        dx$up <- exp(pred$fit[,\"upr\"])\r\n      } else if (correction == \"logit\") {\r\n        dx$mn <- plogis(pred$fit[,\"fit\"])\r\n        dx$lo <- plogis(pred$fit[,\"lwr\"])\r\n        dx$up <- plogis(pred$fit[,\"upr\"])\r\n      } else {\r\n        dx$mn <- pred$fit[,\"fit\"]\r\n        dx$lo <- pred$fit[,\"lwr\"]\r\n        dx$up <- pred$fit[,\"upr\"]\r\n      }\r\n    } ### end prediction interval\r\n    ## initialize plot with real data\r\n    p <- ggplot2::ggplot() + \r\n      ggplot2::geom_point(data = data, ggplot2::aes(x=.data[[d_pvar]], y=.data[[d_rvar]], color=.data[[d_pvar]]))\r\n    ## add prediction\r\n    p <- p + \r\n      ggplot2::geom_line(data=dx, ggplot2::aes(x=.data[[d_pvar]], y=lo),\r\n                         linewidth=1, show.legend=FALSE)+\r\n      ggplot2::geom_line(data=dx, ggplot2::aes(x=.data[[d_pvar]], y=mn),\r\n                         linewidth=2, show.legend=FALSE)+\r\n      ggplot2::geom_line(data=dx, ggplot2::aes(x=.data[[d_pvar]], y=up),\r\n                         linewidth=1, show.legend=FALSE)+\r\n      ggplot2::geom_ribbon(data=dx, ggplot2::aes(x=.data[[d_pvar]], ymin=lo, ymax=up), alpha = 0.5)\r\n  } ### end non-grouped segment\r\n  ### make the plot look good (group agnostic)\r\n  p <- p +\r\n    ggplot2::labs(\r\n      title = paste(\"Real data vs predicted 95%\", interval, \"interval\"),\r\n      subtitle = paste(\"Model:\", deparse(mod$call))\r\n    )+\r\n    ggplot2::theme_bw()+\r\n    ggplot2::theme(\r\n      text = ggplot2::element_text(size=16),\r\n      legend.position=\"right\",\r\n      axis.title = ggplot2::element_text(size=16, face= \"bold\"),\r\n      title = ggplot2::element_text(size=20, face=\"bold\", lineheight = .5),\r\n      plot.subtitle = ggplot2::element_text(size=14, face = \"italic\")\r\n    )\r\n  return(p)\r\n}\r\n\r\n# popover\r\ngear <- popover(bs_icon(\"gear\"),\r\n                selectInput(\"palette\",\"Select color palette\",\r\n                            choices = p_palettes, selected = \"oslo\"),\r\n                title = \"Options\")\r\n# github link\r\nlink_github <- tags$a(bs_icon(\"GitHub\"), href = \"https://github.com/zachpeagler/tomato-inoculant-app\")\r\n\r\n##### UI #####\r\nui <- navbarPage(collapsible = TRUE,\r\n  title = \"Tomato Inoculants\",\r\n  theme = bs_theme(version = 5, bootswatch = \"flatly\"),\r\n  nav_panel(\"Fluorescence\",\r\n    tabsetPanel(\r\n      tabPanel(\"Distributions\",\r\n        card(card_header(\"Stomatal Conductance (gsw)\", class = \"bg-primary\"),\r\n          layout_sidebar(\r\n            sidebar=sidebar(open=FALSE,\r\n              checkboxGroupInput(\"gsw_dists\", \"Distributions\", choices=dists, \r\n                                 selected=c(\"normal\", \"lognormal\", \"gamma\")),\r\n              sliderInput(\"gsw_len\", \"Length to Test Distributions Over\", min=1,\r\n                          max=500, value=100)\r\n            ), # end sidebar\r\n            div(\r\n              layout_column_wrap(\r\n                plotOutput(\"gsw_pdf\"),\r\n                plotOutput(\"gsw_cdf\")\r\n              )\r\n            ),\r\n            div(\r\n              markdown(\"###### **One-sample Kolmogorov-Smirnov tests for stomatal conductance against selected distributions**\"),\r\n              verbatimTextOutput(\"gsw_KS\")\r\n            )\r\n          ) # end sidebar layout\r\n        ), # end gsw card\r\n        card(card_header(\"Photosystem II Efficiency (PHIPS2)\", class = \"bg-secondary\"),\r\n         markdown(\"\r\n                  PhiPS2 is a **unitless ratio** on a scale of 0-1, so we don't need to create PDF and CDF plots and perform KS tests.\r\n                  Instead, we know that we will wind up logit transforming it and we can use the logit transformed version in\r\n                  our regression models. PhiPS2 is calculated as (maximum fluorescence - steady state fluorescence)/maximum fluorescence,\r\n                  and is useful for estimating changes in the quantum yield of non-cyclic electron transport.\"),\r\n         div(style=\"border-left: 5px solid\", \r\n          markdown(\r\n          \"> For a more comprehensive explanation of PhiPS2, check out \r\n          [Genty *et al*., 1989](https://www.sciencedirect.com/science/article/abs/pii/S0304416589800169) or\r\n          for a simpler explanation, the [chlorophyll fluorescence wikipedia page](https://en.wikipedia.org/wiki/Chlorophyll_fluorescence).\")\r\n          )\r\n        ) # end phips2 card\r\n      ), # end dists tab panel\r\n      tabPanel(\"Plots\",\r\n        card(card_header(\"Interactive Stomatal Conductance Scatter\", class = \"bg-primary\"),\r\n             layout_sidebar(sidebar = sidebar(\r\n               selectInput(\"gsw_x\",\"X Variable\",\r\n                           choices = all_gsw_vars, selected = \"AmbientHumidity\"),\r\n               selectInput(\"gsw_y\",\"Y Variable\",\r\n                           choices = all_gsw_vars, selected = \"gsw\"),\r\n               selectInput(\"gsw_col\",\"Color Variable\",\r\n                           choices = all_gsw_vars, selected = \"Treatment\"),\r\n               selectInput(\"gsw_shape\", \"Shape Variable\",\r\n                           choices = gsw_vars_d, selected = \"Treatment\"),\r\n               sliderInput(\"gsw_jit\", \"Jitter Amount\",\r\n                           min=0, max=10, value =3),\r\n               sliderInput(\"gsw_size\", \"Point Size\",\r\n                           min = 1, max=10, value = 2),\r\n               checkboxInput(\"gsw_fwrap\", \"Individual Plot Per Treatment\", FALSE)\r\n             ), # end sidebar\r\n             card_body(plotOutput(\"gsw_scatter\"))\r\n          ) # end sidebar layout\r\n        ), # end gsw scatter plot\r\n        card(card_header(\"Interactive Efficiency of Photosystem II (PhiPS2) Scatter\", class = \"bg-primary\"),\r\n             layout_sidebar(sidebar = sidebar(\r\n               selectInput(\"ps2_x\",\"X Variable\",\r\n                           choices = all_ps2_vars, selected = \"DaysFromGermination\"),\r\n               selectInput(\"ps2_y\",\"Y Variable\",\r\n                           choices = all_ps2_vars, selected = \"PhiPS2\"),\r\n               selectInput(\"ps2_col\",\"Color Variable\",\r\n                           choices = all_ps2_vars, selected = \"AmbientHumidity\"),\r\n               selectInput(\"ps2_shape\", \"Shape Variable\",\r\n                           choices = ps2_vars_d, selected = \"Treatment\"),\r\n               sliderInput(\"ps2_jit\", \"Jitter Amount\",\r\n                           min=0, max=10, value =3),\r\n               sliderInput(\"ps2_size\", \"Point Size\",\r\n                           min = 1, max=10, value = 2),\r\n               checkboxInput(\"ps2_fwrap\", \"Individual Plot Per Treatment\", FALSE)\r\n             ), # end sidebar\r\n             card_body(plotOutput(\"ps2_scatter\"))\r\n             ) # end sidebar layout\r\n        ), # end phips2 scatter plot\r\n      ), # end plots tab panel\r\n      tabPanel(\"Statistics\",\r\n               \r\n      ), # end stats tab panel\r\n      tabPanel(\"Data\",\r\n        card(card_header(\"Li-600 Data\", class = \"bg-primary\"),\r\n          DTOutput(\"gsw_DT\")\r\n          ),\r\n        card(card_header(\"PhiPS2 Data\", class = \"bg-primary\"),\r\n          markdown(\"This dataset is a combination of data from the LI-COR Li-600\r\n                   and PhotosynQ MultispeQ V2.0s. For the sake of this app running\r\n                   efficiently, the data has been pared down to strictly what is needed.\r\n                   The full datasets can be found [on my github](https://www.github.com/zachpeagler/Thesis/data/TIP24).\"),\r\n          DTOutput(\"ps2_DT\")\r\n          )\r\n      ), # end data tab panel\r\n      tabPanel(\"Info\",\r\n        card(markdown(\r\n          \"Fluorescence measurements were taken biweekly with a LI-COR LI-600 and \r\n          two PhotosynQ MultispeQ V2.0s over the course of the trial.\r\n          Data is presented in a tidy format with each row representing a single \r\n          observation and each column representing a variable. <br>\r\n          ### Explanatory Variables\r\n          **Treatment** is the inoculation timing of the tomato. Options are Control, Germination, Transplantation, and Germ+Trans. <br>\r\n          **Time** is the time at which the measurement was taken. <br>\r\n          **Date** is the date at which the measurement was taken. <br>\r\n          **DaysFromGermination** is the number of days from germination (2025-05-01) to the date of measurement. <br>\r\n          **MinutesFromStart** is the number of minutes from the start of that day's observations to the time of measurement. <br>\r\n          **Row** is the row of the tomato. (A:D) <br>\r\n          **Pot** is the pot number of the tomato. (1:12) <br>\r\n          **Plant** is a combination of *Row* and *Pot*, and acts as an ID for every individual plant. (1 1: 4 12) <br>\r\n          **AmbientHumidity** is the relative humidity (add units) at the time of measurement. <br>\r\n          **AmbientLight** is the ambient light level (add units) at the time of measurement. <br>\r\n          **AmbientPressure** is the ambient pressure (add units) at the time of measurement. <br>\r\n          **LeafTemperature** is the temperature (C) of the leaf. <br>\r\n          ### Response Variables\r\n          **gsw** is the stomatal conductance (mol m-2 s-1) of the leaf. Stomatal conductance refers to the\r\n          rate at which molecules are moving through the leaf's stomates, and is indicitave of photosynthesis.<br>\r\n          **PhiPS2** is the quantum yield. It is unitless. (0:1) <br>\r\n          > It's important to note that **only** the Li-600 can measure gsw, while both\r\n          the Li-600 and the MultispeQ can measure PhiPS2. Also, even though both devices can \r\n          measure PhiPS2, they do so **in different ways**. For our purposes, this is fine\r\n          so long as the measurements from each device correlate.\r\n          \"))\r\n      ) # end info tab Panel\r\n    ) # end tabset Panel\r\n  ), # end nav panel \"Fluorescence\"\r\n  nav_panel(\"Fruit\",\r\n    tabsetPanel(\r\n      tabPanel(\"Distributions\"),\r\n      tabPanel(\"Plots\"),\r\n      tabPanel(\"Statistics\"),\r\n      tabPanel(\"Data\",\r\n        card(card_header(\"Fruit Data\", class = \"bg-primary\"),\r\n            DTOutput(\"fruit_DT\")\r\n        )\r\n      ), # end data tab panel\r\n      tabPanel(\"Info\",\r\n        markdown(\"\r\n        The tomatoes were grown in 4 rows of 12 pots each, with each row corresponding to a different inoculation treatment.\r\n        The data table is formatted in a tidy format with each row corresponding to one fruit and each column representing a variable.<br>\r\n        ### Explanatory Variables <br>\r\n        **Treatment** (factor) is the inoculation timing of the tomato. Options are Control, Germination, Transplantation, and Germ+Trans. <br>\r\n        **Transplantation** (logical) indicates if the fruit comes from a plant inoculated at transplantation. <br>\r\n        **Germination** (logical) indicates if the fruit comes from a plant inoculated at germination <br>\r\n        **Row** (factor) is the row number of the tomato. (1:4) <br>\r\n        **Pot** (factor) is the pot number of the tomato. (1:12) <br>\r\n        **Plant** (factor) is a combination of *row* and *plant*, and acts as an ID for every individual plant. (1 1: 4 12) <br>\r\n        **DateHarvest** (date) is the date the fruit was harvested (August 2024:October 2024) <br>\r\n        **DateAnalysis** (date) is the date the fruit was analyzed in the lab (August 2024:October 2024) <br>\r\n        **DaysFromHarvestToAnalysis** (int) is the number of days from harvest to analysis. <br>\r\n        **DaysFromGermination** (int) is the number of days from germination to fruit analysis. <br>\r\n        ### Response Variables <br>\r\n        **Mass** is the mass in grams of the tomato, measured on an Ohaus Scout. (~10:~400) <br>\r\n        **BER** corresponds to whether or not the tomato has blossom end rot, a disease caused by calcium deficiency that renders the fruit unmarketable. (0,1) <br>\r\n        **Penetrometer** corresponds to the force in kilograms it takes to penetrate the flesh of the tomato (~0.5:~4) <br>\r\n        **Ripeness** is the **Penetrometer** value mapped from 0:1 and reversed, so that riper fruit are closer to 1 and unripe fruit are closer to 0. (0:1) <br>\r\n        **SugarAvg** is the average of two measurements of the tomato juice's sugar concentration taken on a Fisher BRIX Refractometer (~2:~12) <br>\r\n        **SugarGrams** is the grams of sugar in the tomato, calculated as (**SugarAvg**/100)x**Mass** <br>\r\n        **Fruit** is an internal variable for lazily summarizing fruit counts. It always equals 1.\r\n        \")\r\n      ) # end info tab\r\n    ) # end tab set panel\r\n  ), # end fruit nav panel\r\n  nav_panel(\"Info\",\r\n    markdown(\r\n    \"This is where we can put the main blurb for this app.<br>\r\n    Acknowledgements. Explanations. Affiliation disclaimers. Etc.\r\n    \r\n    This app only covers data from the **2024** tomato inoculant trial. Mostly \r\n    for the sake of my own sanity, as well as the fact that the trials aren't \r\n    exactly apples to apples. In **2023** we applied foliar and/or soil applications\r\n    of *Methylobacterium oryzae CBMB20* (1x10^6 cfu/mL) to salt-stressed tomato plants, cultivar BHN 589.\r\n    Controls were included for salt and inoculation for a two-factorial experimental\r\n    design, with 8 replicates per group for a total of 32 plants. <br>\r\n    The experimental design changed in 2024, opting for purely soil applications of\r\n    a bacterial consortium: *Azospirillium brasilense*, *Azotobacter chroococcum*,\r\n    *Bacillus subtilis*, *Methylobacterium oryzae CBMB20*, and *Pseudomonas putida* \r\n    (all at 1x10^6 cfu/mL) at two different time points: **germination** and/or **transplantation**.\r\n    We also increased the sample size to 12 plants per group for a total of 48 plants. <br>\r\n    \"\r\n    )\r\n    ),\r\n  nav_spacer(),\r\n  nav_item(gear),\r\n  nav_item(link_github)\r\n)\r\n\r\n##### SERVER #####\r\nserver <- function(input, output) {\r\n# Reactive Expressions\r\n# you might say \"don't make a thousand individual reactive expressions!!! make a reactive values\r\n# object and store them all in that!!\" and to that i say \"no\"\r\n# these are all \"lazy\" so they should (in theory) be more optimized than updating\r\n# all the inputs in a single reactive values object. Less updates = faster. Right?\r\n## global reactive expressions\r\n  Rpalette <- reactive({input$palette})\r\n## fluorescence reactive expressions\r\n  ### gsw\r\n  Rgsw_dists <- reactive({input$gsw_dists})\r\n  Rgsw_len <- reactive({input$gsw_len})\r\n  Rgsw_x <- reactive({input$gsw_x})\r\n  Rgsw_y <- reactive({input$gsw_y})\r\n  Rgsw_col <- reactive({input$gsw_col})\r\n  Rgsw_shape <- reactive({input$gsw_shape})\r\n  Rgsw_jit <- reactive({input$gsw_jit * 0.1})\r\n  Rgsw_fwrap <- reactive({input$gsw_fwrap})\r\n  Rgsw_size <- reactive({input$gsw_size})\r\n  ### ps2\r\n  Rps2_dists <- reactive({input$ps2_dists})\r\n  Rps2_len <- reactive({input$ps2_len})\r\n  Rps2_x <- reactive({input$ps2_x})\r\n  Rps2_y <- reactive({input$ps2_y})\r\n  Rps2_col <- reactive({input$ps2_col})\r\n  Rps2_shape <- reactive({input$ps2_shape})\r\n  Rps2_jit <- reactive({input$ps2_jit * 0.1})\r\n  Rps2_fwrap <- reactive({input$ps2_fwrap})\r\n  Rps2_size <- reactive({input$ps2_size})\r\n## fruit reactive expressions\r\n  \r\n# Outputs\r\n## Fluorescence\r\n### Distributions\r\n#### gsw\r\n  # ks\r\n  output$gsw_KS <- renderPrint({\r\n    multiKS_cont(data_gsw$gsw, Rgsw_dists())\r\n  })\r\n  # pdf\r\n  output$gsw_pdf <- renderPlot({\r\n    multiPDF_plot(data_gsw$gsw, Rgsw_len(), Rgsw_dists(), palette = Rpalette())\r\n    })\r\n  # cdf\r\n  output$gsw_cdf <- renderPlot({\r\n    multiCDF_plot(data_gsw$gsw, Rgsw_len(), Rgsw_dists(), palette = Rpalette())\r\n  })\r\n### Plots\r\n#### gsw\r\n  output$gsw_scatter <- renderPlot({\r\n    gs <- ggplot(data=data_gsw, aes(x=.data[[Rgsw_x()]], y=.data[[Rgsw_y()]],\r\n                                    color = .data[[Rgsw_col()]], shape = .data[[Rgsw_shape()]]))+\r\n      geom_jitter(width=Rgsw_jit(), height=Rgsw_jit()*0.5, size = Rgsw_size())+\r\n      ylab(gettext(Rgsw_y()))+\r\n      xlab(gettext(Rgsw_x()))+\r\n      theme_bw()+\r\n      theme(\r\n        text = element_text(size=font_sizes[3], family=\"mont\"),\r\n        axis.title = element_text(size=font_sizes[2], family = \"open\", face= \"bold\"),\r\n        title = element_text(size=font_sizes[1], family=\"open\", face=\"bold\", lineheight = .8),\r\n        legend.title = ggplot2::element_text(size=font_sizes[2], family = \"open\", face= \"bold\"),\r\n#        legend.position = \"bottom\",\r\n        legend.title.position = \"top\"\r\n      )\r\n    if (Rgsw_x() %in% gsw_vars_d) {\r\n      gs <- gs + scale_x_discrete(guide=guide_axis(check.overlap=TRUE))\r\n    } else {\r\n      gs <- gs + scale_x_continuous(guide=guide_axis(check.overlap=TRUE))\r\n    }\r\n    if (Rgsw_fwrap() == TRUE){\r\n      gs <- gs + facet_wrap(~Treatment)\r\n    }\r\n    if (Rgsw_col() %in% gsw_vars_d) {\r\n      gs <- gs + scale_color_scico_d(begin=0.9, end=0.1, palette=Rpalette())\r\n    } else {\r\n      gs <- gs + scale_color_scico(begin=0.9, end=0.1, palette=Rpalette())\r\n    }\r\n    return(gs)\r\n  })\r\n#### phips2\r\n  output$ps2_scatter <- renderPlot({\r\n    ps <- ggplot(data=data_ps2, aes(x=.data[[Rps2_x()]], y=.data[[Rps2_y()]],\r\n                                    color = .data[[Rps2_col()]], shape = .data[[Rps2_shape()]]))+\r\n      geom_jitter(width=Rps2_jit(), height=Rps2_jit()*0.5, size = Rps2_size())+\r\n      ylab(gettext(Rps2_y()))+\r\n      xlab(gettext(Rps2_x()))+\r\n      theme_bw()+\r\n      theme(\r\n        text = element_text(size=font_sizes[3], family=\"mont\"),\r\n        axis.title = element_text(size=font_sizes[2], family = \"open\", face= \"bold\"),\r\n        title = element_text(size=font_sizes[1], family=\"open\", face=\"bold\", lineheight = .8),\r\n        legend.title = ggplot2::element_text(size=font_sizes[2], family = \"open\", face= \"bold\"),\r\n        #        legend.position = \"bottom\",\r\n        legend.title.position = \"top\"\r\n      )\r\n    if (Rps2_x() %in% ps2_vars_d) {\r\n      ps <- ps + scale_x_discrete(guide=guide_axis(check.overlap=TRUE))\r\n    } else {\r\n      ps <- ps + scale_x_continuous(guide=guide_axis(check.overlap=TRUE))\r\n    }\r\n    if (Rps2_fwrap() == TRUE){\r\n      ps <- ps + facet_wrap(~Treatment)\r\n    }\r\n    if (Rps2_col() %in% ps2_vars_d) {\r\n      ps <- ps + scale_color_scico_d(begin=0.9, end=0.1, palette=Rpalette())\r\n    } else {\r\n      ps <- ps + scale_color_scico(begin=0.9, end=0.1, palette=Rpalette())\r\n    }\r\n    return(ps)\r\n  })\r\n### Statistics\r\n### Data\r\n  output$gsw_DT <- renderDT({\r\n    data_gsw\r\n  })\r\n  output$ps2_DT <- renderDT({\r\n    data_ps2\r\n  })\r\n## Fruit\r\n  ## DT: gsw_DT, ps2_DT, fruit_DT\r\n  ## plotOutputs: gsw_pdf, gsw_cdf\r\n  ## verbatimTextOutputs: gsw_KS\r\n}\r\n\r\n# run it!\r\nshinyApp(ui = ui, server = server)","type":"text"},{"name":"data_fruit.RData","content":"H4sIAAAAAAAABu19B5xV1bX+mco0YGZggKFOAWYoAzM0QdDZMENHqaIgCgOCoDQBTU/MSzQ9\nMc9U00zTGFNMTKImJjH95f/SNXnRmISoMZporLGX/ynft++6655z5w4MRd3399uss9taa6+2\n19733GFV5xlTy84o8zyvwCsszPcKivxHr+i0NQtaZnqe3+B5eV6hV+rDsnO6DnRt3Lbvwh0H\n/NED/JYqH/b1vJLR4XR/OErwnC/a8kVbHqAueaqwrVDg0XgLFN18wDyFU9LReAoEnTxRL/DS\necu2Hk0vqRR66XzErVf2S1oFXjpPcfz1tBSoemEPS0FMSWpP6u9OZrkWKSe9Fi1PaQdsk7YW\nZ2MSr5S3fs5TeLU9Fsa0FSi6ei1xNhnnP/kxOOW8vAR8cbjj5iX5RZz9at/rbgxlUqieZVuc\nrcr+whzaCxLau7NtPV/jyWbrEso4EEc3zvc1jaR63Pw89ZwUb+JiZq5+ly2Ox8XAJLnF6Shp\njrQHHRuT7DfJbwq8TFn0ZO2FMfSSZB0Hs+lD61THh7h4p/c0jSspzmSzCR2zk+Qk6Uso9Znk\nTzIux8W/uPiV5GdJ9pS0D0lf0zzq2K7lVZjQr/elQtWXxK+2B71Par/W8TJuflKMyBb/4urd\n7fNJOOLibjYdZYvJPcGRzUZyiT/aBrLtuXFxMKk/W0kaG4czKV5n4zeXfSAppifFN1dSpbAX\nx+WK62jxfTT5yVbiYo8rx7Z0t6f0dA/KZczRLD1d45GiE7enxbXnsl/GjY/DnbSvJtlANtxJ\ndHpiV/miT58R4vapAi9z35I5a9zzoZbewCHX1Bu4Xg58ZOPvaMW3pD0xW18ue1fcnLhYWCCe\n87x4+8/GD/1A0tX+p31Ylrjcryd13ScL25N8Nb8bWJCFZlxfEn2NW+KX+pPPeo5u03LX8izw\n4vWTVLLlQNno9RRXb5Y4m5DP0m7jxul+HZvifOForOtoy1HT1Lbc03pBlr44P5Bz9Nw4WtK+\n9Zg438w2Tuo0KUaQlraLvIS6xp+0x+hYrG0vbozuS4rVSe3Z6OY670iUY0X3WJcC8ZxkJ9ly\nle72uTjbTrLLpHE90V0cf7pPj0uygThfSZJJrjJMes6WV+RSDlV/uc7pTn7Z5BkHs/UlyTkb\nD9n0rOPxkSq5rEfymM33VHvamwvFO7detHXnfv+pMhwVtfbp2LP7wL49O1Htv2Zf1+79e3d2\n7T7QdWDHnt1oLl+4dd+uHbtlU1nQNCEcrggVbdnZtZ90LPVtXVsO7NnnP70QTMb7Ep7g3VMw\nqS1P9ctP3Jw4GIevp/1x9Z6sJ2l+Er64NecqG00/27zuyqHOS9KZl6U91/5D/WTTdy7r97JA\njTfbcxwPGmd3NpjNrnJdi/7kYvdxus3mT3H9cfN7OiZpfE9suKft3dl2d3zFfbqT0aHYaLZ6\nT+yiO3vM1U+7k1tPxnfnX0ltcbhlWxyO7ujn8slGT4/LBuP4TOI5jkbSmrLZSFJ/3HPc51Da\ns9GLGxOHr6fyzeZD2XDIObnGg1zw9YTfXHB357/d2X8ucaMn8SEJRxwPSf1J/PaERhK/3dla\nLr6XC8+54syFTjacen1x681mq7nqKYlOT9bliiu9Vdzn+Psca5s4GjZ3PNCR8vaytHuqP9fx\ncbj1/KRPLriT6HSHMxsvPeExiYeezssF3+HiOR5i3fHCR9LnaPHWm/59qLi9mOeeztd0PdXX\nE33HxZpsdd3XnVzicCXBXGnmQj+XWJltTi68ZOOtN8ceTVw9pZekj2x9SbaatBccrc+xiJHZ\n9r9Dqeu+7mKO7ovDrXmNmxOHNwl3tk82fpNw5II/15jcXV/S2O5oHArtI1mOFd1jXTz1rD9J\n7bn2H+68w12DHhdHO8kGknBko5O0hp48H8rnUPWX65zu5KfrWlZxsutuTDY6STR7wmdvf3JZ\nT5JtxeGS7XwvoTvbPxx/TMKb1JcLviT+cvWlw7XfQ+GzN/0yDseRiuXdxcje+mSTWXexM9v8\nnuo92/i4dSfZYS42eag86PYke8+lrTc+3a27O5n1JE4cyxK3rmy2eqj4u9Ptsfocznri+ryY\numzPlafD+RyKfx4K7iSZ6Hp3fh+HNxc+chnbnZ3H8Xqo6zgSfpnEc9z6ND/Z+rPZbVJ/HP64\n9u7sryc+5UpuOnEf90n65GovuYw7mrZ3vPGT7XOs44Erhx9Pe2OMK6/M4iU8s64/Se26L9u4\nXD+9gYN4egvX4XyOFz6SPkfb7pLoJ/Xlwm/cnO7sPWlsLvwk+c6hrL+3P4dKJ1cfP9RPNtl1\nRy9J1nH9ceOyxb+kvlzwHIoN9KbvaBl1p8M4uR7Kmo/U+o4FzcP9HAoeLfPDodETHLmsPc4e\ncqGXDW82PSfxluvYXG0nG51Xgq0fbyXuk9Se69g43En0ksb1RHdJfOWpelJ/nDziaHVHQ/d1\n93y4n97QX7Y53clP17Ws4mTX3ZhsdHLRQTZ9HYlPLuvpztY81YeP+/8lYugllUIvnY+49cp+\nSUv+Palc/iZULqVA1Q/lb+3oktSe1N9be4T+u2+STy1PaQdsk7YWZ2P6b1Yl/e2tPIVX22Nh\nTJv++2Rxf8NO22R3fwOsIGZeXgK+ONxx85L8Is5+te91Nybu7x7ptjhblf1Jf0NJ2+yh2Lae\nr/Fks3UJZRyIoxvn+5pGUj1ufp56Too3cTEzV7/LFsfjYmCS3OJ0lDRH2oOOjUn2m+Q3BV6m\nLHqy9sIYekmyjoPZ9KF1quNDXLzTe5rGlRRnstmEjtlJcpL0JZT6TPInGZfj4l9c/ErysyR7\nStqHpK9pHnVs1/IqTOjX+1Kh6kviV9uD3ie1X+t4GTc/KUZki39x9e72+SQccXE3m46yxeSe\n4MhmI7nEH20D2fbcuDiY1J+tJI2Nw5kUr7Pxm8s+kBTTk+KbK6lS2IvjcsV1tPg+mvxkK3Gx\nx5VjW7rbU3q6B+Uy5miWnq7xSNGJ29Pi2nPZL+PGx+FO2leTbCAb7iQ6PbGrfNGnzwhx+1SB\nl7lvyZw17vlQS2/gkGvqDVwvBz6y8Xe04lvSnpitL5e9K25OXCwsEM95Xrz9Z+OHfiDpav/T\nPixLXO7Xk7ruk4XtSb6a3w0syEIzri+JvsYt8Uv9yWc9R7dpuWt5Fnjx+kkq2XKgbPR6iqs3\nS5xNyGdpt3HjdL+OTXG+cDTWdbTlqGlqW+5pvSBLX5wfyDl6bhwtad96TJxvZhsndZoUI0hL\n20VeQl3jT9pjdCzWthc3Rvclxeqk9mx0c513JMqxonusS4F4TrKTbLlKd/tcnG0n2WXSuJ7o\nLo4/3afHJdlAnK8kySRXGSY9Z8srcimHqr9c53Qnv2zyjIPZ+pLknI2HbHrW8fhIlVzWI3nM\n5nuqPfhvH/Jf9NL/R4m8uXyYx4cOPnRGcwo4J/Z/h7BvOxSDWiChIpQ+oF7mlxL09RHP+ZhX\nhudS4CgVOIIVlqO9HPPlbiZXTnrkpQJthQJfOdqpTbZXCJ5LAEsxnjwWCf5K0NZH8F+MUgCY\nhzmlAl8p2gmJPx84SZN9OspWqH7yTB7JV6mi2wdzy4RcNM1y1CmTYlEvEXRKAMsFnWKl92Ih\npyIxjvLrI/TZR9CjbqmrYoWbNhHnPRwrvZl2VeSlvFeuk3xR/7Szci/dXim3CqEHPlO2Ur/5\nCid1SNqFYhxlIPVcLOZRVrSnPgJvgZey30Ixl3grvEw7Zz1fyFjKT9KjnKgDroE2Rhsk5Hja\nl9Qf9UufkZmy9hHqIV/IvtBLjxllXnpcIE3an4R8pk/JqF4saFIPFULv1BnlQT65nkLBT6l4\npu0UiPWSF8YMyZtcg8RTKGiXeumxQMYe2gLxlAu8BV66/3Nt0p7KhL4KxLhiMY82UCIK/U/q\ni3KSWT/9jbIoFjyVo02um7E6X+GW8Zg6pQzJG9de4qXinZSBpE15c30yjpYIHKViHvmUvkGd\ns8g4L31A+h9tmuO5DvJOv6AMGD8rRJF+JG2jRIyROiU+6kTGjDLBL+VRLMZXiPZ8Mb9M1Kkr\n2gb9oo/AJfcB8s69jbZLn+f65L4iYx7XVKFwUF8yltEXaQ+MmYyP0v7kGmgjMn+gnKTuZO5S\nJNZP2tJnSkVdxjZ5MyD3DUmTPEnbKRJ9HCf38xIvXY8lir5sk3mT3CspW8qf8UjmVnLtMv+h\nf9M/5T5KGlxTiWiT2S95pVxoW3JfKxR45D5TJHDT/si73A/5LO2Da6OtMR6WCyhtkb4n8y22\n6xjHuvSJMi/dDqX/UI60PfIq+0lP3opJX5D7Qp6gwzbyzX7aWFy+JWNRuaqzrVzglG1xY2V/\neUxbmXouVWO1XMti8En5lorxUvZaV7qddlcqxjH2lYuxlJHmLd/LtCXilrplXZ5HZM4vcwid\n7xSr8dnadO5UIiD9nvxIHrl2rkXmZ2WijXG9XOAsE7g5n7il3CS/8lyQVIoSoI73LDJ3LhBj\n9dlD5t0FCpfMx+WeLOOXnKfPMfLWVd40FIl5elxBzPxsY/Ky0JDnBHmGlbFQnq3Yxnm0d5kv\nV4g26ctyv5B+L22myMu0IxaZw8q8TPt1mZceh2WOK31b2pv059IY/PqsLfcg4pGxqTjmWZ8V\npO3KXLNY4JXrqYjp0+0VXvp6NO6k8VJeMvbI+Xq8plWRw9iKHHFyL5U5EO1Hx1fipL9LfejY\noOWbdOeg5xSpuowpGp8c213cKVRtMgeKmy9jlDz/SZ6kn8a1FYu6jH2SD8pZ4k/69q0ohqYe\nE6cDuZa4MQUx41gkbzJ3k/FZ7p+yyL26XIxhvVC0y9y2SOCWd3G6SHvVeqU/My+XewKh1jlz\nVp53JG1pPzIv1DLhXYeM29KfeCcg+WTR32TKPYHrzIvp1/uT7pNF3qHJb0D1bbj+trdc0cmP\nwan3ZXkuiNtLtY6lveSJZ7k/Fqp+mV/rfUzefxWq8dJepV1SR3KPoa7kPQnPOn0EDpmnyfO3\nvDPSZxN5Jizz0v2jXNHQY0oEbq1nbQ+ko/Un7wcqVLu8Z6oQkGdUee7S9zPZCtfWR8yT+Ya+\n/9f3diVqjDxry9y6j6rrfFjKVfNEv6ffyfjHwn4Z+2UuKnNceecqS4UYq+9kZJyVOqDfSJ1J\nHcp+eX/MvjzRJ+/S5T1OXM7C3FXikPdW+h4r30vnI0/hZE5BeyoXc+Q9vrxnlG15aqz0NY5l\nu9w/pZ3IeK7zBqlbiU/WixL6ZaFMCxLwyPuyPl66Den1yL0+bv+X93lyHOWgec2GJ46Wtkt5\nHyTjvz5byb78mDl6/6AvMn+VZx593pf3mfK+StqYvDuUNki7LFXjZd7O/SNuDXEyYZu0b3kX\nq8+Qkh+530q5SZ8qEPO4n8nzGfHqOxSO1/cL5JFj88ScPEGDeV6+6CMOCWUOpeOx9lEpH3l3\nVqrGyP21QIyX95Slos55lJ9cV74Yq+9PZZzlGNYlL7I9X7Tni7HSBskXbVTe+8m7S71vSd3J\nc6PUrezT/JGu3sPlfQf5o03Sp6gP6ZP+3LS3HSo8vNLQxocpfJjKh2l8mM6HGXw4gQ8z+TAL\nD/ltrfapzT5N8Xry4sRIvzT7ZaxfRvilyi+j/DLGL4P8UueXfhD2QDwHpRr9MnksxfwgYDT5\npRG4AzjAL8NAZzjKGJQBgMVWYBG9SuALymS/BPz6fHtDwWtApxVwFIwhgDV+GQx8gzC2Ge11\naGMS08/LPOTpLw5aMLcvnmkAxZhfImiOAa+VWOMwwCHorwWsAm7KcSBgDcoAAYegbwjqQzGe\nNAN6E/0yDmW8qAdwgmgbD33Uo4yEfMZBdiPRXod2jmsGHIX5dEB5IGeCEHeJwY1OJ+F9QXMk\nnsd6KXusAV9j0TcYaxghdFKBMcPR34jxo7CGBsit1YtsdAhKoZAtg0Ut5g4BzkLosUDIuBC8\n5IPGKIwZBjgSvFSirxx4q0CvCn398VyBeiXkNRTzKvBMfxqCehEg7TvAXY0yQNAbiLHVgMMw\nZxDWOhjthAO9lE3mC5zEUQD8g7yUrvtBD/SRFshnMvonQe6VXipmTELhuAkoYwGLvZS9ThDP\njCWBfzUBjgfNZowLYBAj6rxI743Q2Ri0BWPqMa8J4xtQ6sXzBIxvQr0Ja5yA9ZNXyecAtLdg\nTIPgtw74SXM0+scKXqoETuo2eA7sRG5eA/FMeyoCPfobx3f34kSAp6+X8ise2pNenGiB3prA\nM9fQiLYW1CdBrxVY32TAoH0kYMB7NeaOwnN/8FSOcQOBYwD6GAOr8RzwGvhBKepVgn95AOZm\nLy96B2H8eKytAXRkklUK2RRjLGN9ESCT+gEYPwC8FYP3Fi9lE4EMgphQA7mx9Ef/WMhwOHic\n6KUSlWr0ydgf8DUC46vBTxnaqzGPPAfja0GP7YzTvCgK6uOgj+C5DmtqwDomCFzNaBsFvoeC\nt8leam8IaFV6UcxhohfwVQ+6o8F7K+a0oo04WryUz4+BPIZ5Kd/knjoc6+F+UOal/Gqil4rT\npYIv2jz9i8llvZfKf4owpsFLxYE66DUPtOpAY7iX8uMC6CJPrF9+aVANOBbjSH+cl8o7yNtA\nL7UvT/RSe2Ar6izNqm0U2jiPsqGvjYMc6sHfCPS1eqn8oRaQeqZ/T/RSttyKUuel9uihgo9x\nXir+Dce4ZhTG1RbgGCrGDwWuBi+VL44AJI4WwTv7JovnJkEriG2B3dN/BqE+GG3l0BX7GTOY\nb/VBO/OtQSiDRb0Sz31Ef1D6iXbG5hovdYDLRxv7ucf2QXt/L5WfBvTk4a8/6qTDNvLNfsaz\nvl7KDrlXDBFlsKqzbbDAKdvixsr+wTFtg9RzjRqr5TooBp+Ub40YP0C0a13p9hrwVSPGBXjG\nChrBWO41mrexgh77iZt52FhRJ5/sY84/QNSrY+rVMfW4trGijbZKOFjxI3nk2rkW8iULx1L+\nxDlI4OZ84pZyk/wG9ZHdlBEJkPF+hCpsD8YME2NHJowd5qX2D90+AnAoStBeGzNvGNpZuMcO\nE8+1At+wmHHDYuZnG1ObhQbPw6Q3UuAiz6zLMynnBTkZYzvz5VbRxhK0VYnnVvE8SZQqVZeF\neINn7vN6fosYK+F4L5XzT1JtrV7qDDJJPDNX5ViuVdJqFXgmK970s+RP0iedFi+dJ8kv877x\nArbEtI8WuFpicCeNHy3otAj8cr4er2mNzmHs6BxxTvRSNsK7nsA2eC4r9tJtSObaLI1e+l2C\n7GsV7ZPVuKKYOUWqzsv5ohh8cmyhapNfgMh+tjEHSppfLOZy35ft+ouHuLZiUS8WUPJBf5b4\nk768KIqhqcfE6UCuJW5MQcw4Fub1jF2MVzI+8z6qUZWhgDyD1qv6cNEe6LVKlEpA3tVVxZSg\nr68YH5Q6L3WW59mgn5e6zxkjIHPwKsB69AU5fwXGlHupvJdwAnDyfojPgUxKvVTcrgIPPLfV\n4Zl3F+STRX4hw/OJ/JKlStXZL9vyRF9fUdheL8bLL3EqFc7+aOf5rBHt/WLo1as5xNdPyEfe\nK8rzF9fUiHbaR1/xXKD4a8Az8+0G0GxQhbzUY16jGC/tVdplnZeKfxxHXTUKOjyDjxI4GlDn\nvFFY0ygxjrw1KtyjRDtho6Khx9QJ3PKulvqReme8o+ylHoPnVhTZznvpfPQRBm28i5Z3uKNy\nLFzbKDGPOOoVPsJ+XrpP16m5Uo5SLrJO2Wle4ngKnmmbMuZQXv1Ef6UorPf3UnfNjE/lYi5L\nhRjLe+Zh6Bsm+vLRz1jGe2neQfcTddk/AnTlPXael7pn6ifG8R50mMDFwvtM3qGP8VIxkmPy\nY+pVCr/EyS+WaU+TwQ/vRZq9lO22eqn7475oy1Nj873U/SzHsr3JS8Vv2jXnTRB0x4l5eeJZ\n4pP1cQn9skwE/aYEPBO81H3IBEG3yctcT5Mous4yVuCU9yxjY3jNhieO1tgEvGNF/1joelwM\nX7o0ifHDRHvcixPSfuJenKj0Ul8kD/XSbSxoZw4jbZB2qV+cGCnGcE+PW4OWSaFo0y9O9BNr\n5f7ZpPgZI+ZKubFf0uJ4/eIEv3+Je3GCaw1yuwmifYIY21fM4f7Rkxcn+F0M187vK7iX9BFF\nykfenZWKOeSrTOGn/OSLE01e+osTlF+pWPtYMVbyzL4KNYZ1aY9szxdzKBveG7Odugz4Gi5k\nzDVQRr354gT5I125LrZLW6PvMeeVL05In6xQL07Ytxvm2rcb5k6xT1Pt0zT7NN0+zbBPJ9in\nmfaJb1AUzLWvUPiPbalHS2aeJT0v1WZJz7Ok51nS8yzpeZb0PEt6niU9L0V6Xor0vBTpDku6\nI9VmSXdY0h2WdIcl3WFJd1jSHZZ0R4p0R4p0R4p0pyXdmWqzpDst6U5LutOS7rSkOy3pTku6\nM0W6M0W6s4dvreT1csl/hZekWwFX4ou+lXkpFX2T5crLu+jbuldS6eNKbCl5GZTS46SUHcVS\nnmPRNyzHuvR15YgVfev3ci/9XXHFFVdcccUVV1xxxRVXXHHFFVdcccUVV45eSXtrpT/eXCib\n0jplWkvrzJbWtoyWWbqlbWpGy3TdMqU1o2VaRsvM9JZZLa3TdEtbW0bLjIyWDDxT0vlpa21p\nnZLRckJGy8xX5Hsdx/r9hFdaOdbvVBwP5Vi/Z/ByKsf6vQX3bsPL//2Fl/M7ES+V9yl6412L\n3igv1fcojvW7AC/nchyca45qqXTFFVde8aXKFVdcccWVV1SpdsUVV1xxxRVXXHmZlwGuHO8l\n7b2OARlvcWS8odE2JaMl4w2Ntox3P6ZkvB8yJeNtkCkzMlqOtzc9ZukWtXa/Ra00aJmay/sh\nwX14yWgT9Puf4xaWvMLgQAclbH/YwZcTNEOOM1jp4LGAx9oOHXQwDh7z/f/lAj0HX4nQfdzH\nfdzHfdzHfdzHfdzHfY6/z7E+ZzvooIMOOuigg8ceHvPv4Rx00EEHHXTQQQcddNDBIwfHO+ig\ngw466KCDDjrooIMOOuiggw46+JKGkxx00MHDhR7/TsIZaD9e4bpbXllwvXHQwZcvPPNiBx30\nzAbPQQePQ3ixg70BzzIOviLhLQ46mDvceLGDxwPcdKWDEnaZlym8uHfh5k0OZoNbjIMOvgTh\nQQdfzvCcOgcddNBBBx108BUPb3HQQQcddNBBBx100EEHX65w65UOOuiggw466KCDDjrooIMO\nOuiggw6+pOFBBx108DChx7+T8NqSqH1f8bbgY7Y9EcHd4z7qf64wuzqmBh+z+/IIHtgd9Z+7\nIB3ueU00/gLQ2Y9xu979C//zS7MN+NbURf2E6wZEeBfWRv327wV8KZq39/UR3Lou6t8JPmdf\nH807Z2oEW++N2s8HvLAtGn8+8F5wZYT3wF5A8HnhWyP8K8dG8877UAR3gO4GrPvMxyK4Hvj2\nPh3B7cC3B+tbBzmcg3WdDzxnbYvw7vtkBM+cFY078LFo3KYtEdxyf9S+GfN2Yb0HbozonAs6\n23dEcIuH9fwpmn/hH6A/rPesS6P6Be+FfCDfDZD/rlujeZshz80rIH/IcfPHIz4umh31d8Ee\ndgLPzndgHZDTtmXQG/R+YGXUv+8XUX3Pw5AX8G6/CvYDO9r/6qj/vLsjfHsLo3FbMO/AHODB\n+Augv+2Q174fR3A35LYVdHddDH3/LeJnA+zprJ9CH5BD13DwD/zrsY7td0Zw8yDYB/RwFvhf\nfTv0DnqbYRfnAO+WxZAD+Nv+I8gL/duA91zQuRDrOX9nBLvQvx1y31cf4TvvOdCD/a4xUf8m\n2MVZE6P+cwF3YX1nwz72PwL9XRbVT8M42uHeUyO8m6D3TeBvx/6ofgb42dIawR30I/jLFqxj\nx2/AN+x+B9cL/nffDL3CT3Y9AL+vjOZtvwn+DHgO7HUH7G8T7HUX+nfDDw+cCTtqjOD+d0Vw\nO+x/G+xqB/x19zXRPMabs7Ge838e1U9HveuiCC7EOjciDl2QF43rghw3gK9z4K97YTecvwXz\nV0QKM12IP6v2p69vAcbtQZzYRP+H321HPGNc3FqXLrfN4ONc1M+G3rYWwO7B19mQw/qPRvW5\nGNeFeLwS/n0mxjGunQ3+T4ddnUF/ghz2gs450MtW6hF2thb8nlsRjT8d/WeivrcL4zF/HfRD\n/sn3TtBfA/ltgj+swbwNsKszILelWN962OUGrG8t5H0a4sZq+NMqxItVwLtnQzT+NMzfRnzQ\nxzrIZwX0YoCf8ed00NkF/zkZ8YP74jrKEfa7BXFtDeS9Cf68AfRWwD7Pwvo3Y56Nb7CvM5el\n70tn0S5Wgy7ksx787ACdlbCjpZAH+1ci/m1CvDwF612F+LUacfK8t0Tt9Lvd34raVyLenrM3\naj8P89ZA3pvAzyqsYwPorJ2Yjp9ymwu9bYZ9bQJ++s0qyGsx1n8y1tWJdWyEvZyO+hqM3wL8\nZwPf2eBjY2007iTATuh3092QI+yuC3Z+Bux0BfBvxjjKcTP0twd2df4K0Ie9bILdnw57Y36y\nEfwsBVxTke63q6kv8HMa5Mb850zA0zFuFf0BelgLvldCPksh5xWwn0XgYwXk2gU6azgOeJaj\nvhH9C+FP50IOq4HndNDpAr7FkO/WQVH9FPDXCX7PoH9CP+vgL/SPBaC7HnhpT6sgxyX0V9j3\nGvBxJuqnYv5K2MEO6GUt/Rb8nA45Ms+lXW+4FPxhHdy3KI/N8I/V4LsL8qYfrKe/wr9OAd3T\nEJ9Pwzopt3Pp/+ifD7s492bwCbnPwfqYr8zDulcD3xLQ2wx6m0kH/C3Hes7dmW5vm4GX9rVl\nC+IY/PYcwM2wg7XAczbschXksA7zV8IvtmA/NrTzTRGdLrRvhRwZz7ejvgrxbTv4Ovtp7DOQ\n60bQ2TQnmsfz0EbYB+PvKoynvhmfz4LfL4Re5xMv4hfzRNrlGVMxD/o9B+2nY52ME2dSb6iv\no1wx72zIjfa1HPyug1w3QS/clzrA93r47UrwSX9eh/E7YL+bSqNx6xFPmBethV3NRX0j1n0+\n1nUm5Hsu+OX+RHtdCXyMw7S3tdBTB/o3I253XQO/hX3QXymPDuBfgP4OQPJnKKcFUX0F+FsE\nOjx/LiGfy9Lj6Xr4/Sr0r4O8ToOcmL9Q7vRrm3cA/wr452mQ11mQx5xfpMcPxvfFqJ8FuZwJ\ne1qB+jzwN/Oj6fa3Cn6xFesgH7SblbQ/yGMZ+F0Lec4C7IScFwL/TIyjPcwHPfK9gnIBf8yj\nTsL6ZqO+Gvjmcd3gg39Pay78hfGJftAOPe6EXXZg3MlY51z0U28ngP856G8DvzMR19oAZwGu\nhHzPAR+LMH9abfo+dwr8fSXsdi7ocZ+xesb4ZaDP/bAD40/E+mmfU1FfAz6oh9noX471GsQJ\n5j/MM0+AXldAnssN5A07XYb1r8O8CcC/FPqjvOZBP6svjercX09BO/VEvFznGtA/A+OY361E\nPjMfdsP9dQHqkzFvK9a9DvazEnJe+0C6nfOcsBT9jHvM104DnrkYfyrkvRBwOdZpAFdgHXNR\nXwI9zIfcuS8uhvwXQN7zQXcO5DEH7cwLlkH+q1DvuDfdn5ZCD/OxDu5TzBvXTEQcwrglwLcM\n+GaRP9rva9LjwErwtwz4qf/FFen2OgftBnpYAMj9oQPzZ1HvXA8g7+E6YZccPxP8LUQ7/Wcm\n/GEx+D4F808C/nmwx2lon0t+qQfwtwh01gDfKuA7FXI6BeNnM55BHvPBD+W44taobmhv5J/+\nCj7WQ/+tXL+KL9PBl8H4qYDcdxeCD8abuZQr5MRz4BSMn4n6yRhPuIx0MG8+7GPNzmj8DMZh\n0GecXop1nwY/WAY7PBHrWDsg6l8O/E3obwc/lNsi0OU+tB1yXgr5zMc6T8b8BWhfgThwEvAv\nBF6LH+O5b58KOAnj+X3QWuh3Afo7sT7yTTmdCn55TjiVdkR6mD8D83gfsxjymYtxC4B/1bvT\n/XEy5Ea9LQf/J0M+HaA/HfVToJdZGEf7p346wQ/9hvc6tDPeI5wEyPW2os51Mp6dCD1M4foZ\n38DXasjjVNjhIow/AeM7gX825k0BXyeAf9rfdPRPozww70T0G9U+GfObQW851j+Ddo55C+hf\ngLOxzg7IkXKbjnb6Ff1nBvUA+6SfzYf9jKUfQR4LGE/3p9uPAZ88R3FdhHOBvxn4OmnX6D8J\n/PN8NxN1ngeXYh3tlBPaV9KuQJf7EfMG7ofTII+1qNtxqDMOTYd8yMcJWBfjMfOj6cA/HXgp\nH8qdeUobIOVCv1sO/6hT42jXnZQz7J37wjiMGwW+x0Ae4yDXevS3ABpA2tM8jFtE+wTftPcp\nwNcKPqdh/jysn/sJ5VYH+YwBbEX7dMhpPOiNRP9w4CPflWjnusg/7xM5bhrGtYOvOVwP5L0I\n9jqP9oFxS8DvZMznvku5UF/cd2ajnfY4m/GK8Qjror3QHyduS7cfwpkYx/g8tTadH+6TkwFZ\nn4J50zCPf8/dgN9xtFvga0G9DXpqAj+M28y7GO+2rY7qK0CP9s57pJVfitp5viJ/7aDTATxL\ngZ/ndZ4XF4H/Noxbcns0rwF4RoO/0ag3Ay/vCakXxgfqk/kH19GBeS3Axzx0Cu0Q87lPzAef\ntBueo04Ev7TjNoxvx/g64KN9ct9jfJuAfu4zy+DfhnoCvpMA6feLAJnHn4Z1zMc65qm4N4Nx\nCPzzXnY+5Qo4dVu63uinJwPSH+nnXNdi8Mtz1ZSL08dxn5kBvpgPj8f8EaivAJ8G9sP8txXz\nGedOxjjeS9N+GZ8ph07Ez7nAzzya+898+vEtiAOIB3Ohh9WoL8d4m28y3lwOeWM+89PFmHcq\n5LECfsF8YeVN6fFhOdbLe1ueo3iPw3xuAfptXEP7UuoP61wIyPPWQqxzGfxsAe0I+uF6loIe\nz2ELsK5OrIv+dQL1gHbmnTwX0m+Yn7Ri3hLQb8T4drQzr6Y9TMW6qK9lkA/PT2MxrhH0CPn9\nE/MuxgHmkyfSLoGf54BGQN5TzQEdxgfeQzBPI38zMI/4x4OPGdvS7dxcle6HhLRv+jnvGRi3\nmR/zPMh8uBH9pEc/5/7NvGwq4xX4ZpyaATgW85ln8XuWieCD8YL7EPNs5nc8x9DuxgIv7Y30\nud9xvdyfGGeYh7QAMp7PQf9E0OG+yP19AuWMeLYI+md+xfyDfsn1kh/GO+b/baDLezXGacZH\nfo/CPJ77Mfcl7sOMG9yfuK9OW5a+nma0N9HuwRfzd8qL52zuH/S7drTPgtz4/x/xfM04yTyU\nfj4B40mf3y/Qv5nf8by2DPLtxPp5buI5gHnqAvIJP6cfUQ/MfxbDH2jHtD+ef+z9C/mBXrnv\nMT+nvGi3zFtmsJ/7ONp5j8B8jfdkzFd5TqY9Ut7cv7hO5qu0j3nr0uN4B/kC/lkYfwLXg3HM\nq2dDLrwv6ID9MA+w+Qbo8b7I+jv4Yv7M+2Xexy4EH/Mwn+cExnHGZfoN7Y33bPxejPG8FnzR\nTqYpez6F6wYe7s9j0c84TPksA/4laGeeSD3PBp+nwG54L0Q/xkHSrp/2x7g9CfhXAO9K4F0x\nAHqGPmg3CyFv5ufcH+z5AfrmPrMC9nkS6PM80c51oc57tOngg+dE+gnvSdtUfBuNccxPaZ+M\nIzwH0h5sXGVcYhzDeN4Lc5/hvst76npAjmtAnfrlvtOIft7f8j6D+QDt4mS0zwW9TuiRcVX7\nM++BOiBX3n/wnoJxhPLmuYvzGYd578P9hvsK/awJ/BAvv/8+6aNKvwui8bwvmAs6K4qjdn6f\nuwTzloDOItozIOMpv09jvsv7Wcqlk34Pu17/U9gP+OG5lfkBzznMe5egnd+X8T5yNegvht/S\nzpdwf8D8VfCfUzFvFeTHPGwh+FiKcSt3RpBxlvLgvQ/vhRaDDu1gCegxr12IefZeDvjt/TL4\nZ9zg91y8v+Y5jd9v8RzOfN5gHO9zGKe4jkUYZ/NijLfvZTDeop37Fr+nYJ3nDdol/XEo4EDA\n4eCTeQLzn4mMf5Af7y+oZ3vfAsjzE/M2nl+Zt1H+DahPAb9j6Veo835sHuyiBXxUgF/uC9xX\nmI/XAjJf4T47FeObSJd4QIf79RQvPX5zn2P84f3LCMiJ+y/zaOZXrcDDc+cY0KsBHsqdeQvj\nHeNwBfkAHIB5zA9OBL168gE6JwC2YTzPA8RH/iYBFjNeQe7UI/OVOVw/1wn60yAf5p016Oe9\nAP2lEv20O/LBfYLfvzLPpD3R3ri/MB9mHjIG7cz7GZeZd3Lf5vduWHf746DLfbSUfonxnden\n2z31zn2Q94bNmM/4znyFfkR9LNofQdrrlOvT+eb9Iu99eN9N/TLv4f7FezJrX6BPfRnlF1Pp\nD4D0M+6fvA/m/st18HtP5m9DKQ+OA13rL/RX8HeSaue+OxDtzMcGc/yydHn2RTv3Q57nh6Cf\neQjjAfMW5rVttFfIgd+r83uDqegnf9Q387PV3EeAbxn4Z17IezD6GfXEcwP1zThysqozXvE8\nzHyhDnR4L8j8nPcK/D6R51rGC5sHoU58VaDD71OtXjCe7ysxL1gLerwvoj4pX97f8vsJyoXf\nd/PegHrg9zWUK/NA3r/xfpX7wTjg4TmRcZnnUsaBeszj/Qvvh/l9N+ME71mZ15Av+h3tl/dY\n9CPGnXbwyffR+J4I8+4lgNyfyC/Xy3jNPKIP6YLfRsYXQN7rMe5OQTvvpWajnecW7h/T1Xja\nP+/lmK/PBJ/0Y97T8/xFP2Cezu9puB7eNzB+Mq7Tr2ahzntCvuc1Eutn3Kb+mG/wPoLfE1Hf\n/B6C66X9kb8ZwMt9mHGN9BgneH9Gu52LddPeyIf1H9R53mDc5fmE/laP9fB7QcaxE6ln8Gn3\nVfTT/pgP8J5knvJPe18OOTAu0l4Y13nupv4Yt/h9B7+foh0PwTie63juZ/7Qiv5ZmG/jNvih\nvXPcXMzj+2pDGMf2Ix5Q7oDkm3pjnfv+aNRHYjzvcenv46l3rHMQ6vOvwjqoH7TzPSnGP8qL\n5wTmP4y/J4Ie8zbmZ7wnp36pb+qZ38PwXpP72TL0Mz+g3VI/3H8Zf+hvPI/Sb+iPPJfRroiP\nfDCu8D6O/si42nFLRG8B4hfjEe+5xwA/5UX58J6I7yEwL2Q84LmWdsDv7W08BD7mP7Qn5m/2\nvSD6He0IfLaqddCeeb9NP+V7b6eQD+qZ+GAPJ2Nd3K/5/gLP31NoF8A7XdHxMK/ho+nx0kCe\n3A9nwS54X8b8rBH8TIR8eD/FuER98r6c9sz4SbnTDxj/uB/wXM24xrjK8xjvI3hu5PseM+l/\npAt++L0E7+O5v9DOeR/O+MPzKe85uW77PTHlDDrU62zwwfd/uB7eF9vv9wF5fqAfcD/jvsl9\nlXkU7ZlyZTxnXko9Mw51wl7s9xG0a+oJ+uX5Z91NUTv5KwFe3s/TPnkPxnyDcZ/+wXshxiXa\nL7/foD0w32P853zGfcYxxh/6I/XE86DNz2if4Iv7lD5vsc77P/oBz3ErEY8pN7sOyI/zRil7\nayAEn7Rf+gvPkVx3G2Ae6f8ifZ/i+8rMx8pp97XpcuY9Hu1pKv2XdfSTjzFKvvRjjqccmTdU\nAPJ8x3sJ7vPMg/i+D/2sCOvi++i0E74PSjlQf+Sbfkw/ID1Cxn2eZ6k/3msznnGf4ff5vEdY\nh/lTVTvtk+vmed++Z1Kb7jfM65mH8N6W42gv9v0LZd/TMO9ExYe9z6WewBfvb/g9HuMm7cp+\nD0h7Bx/M95jHM8/kfTfpkk/6Gd9PoB54nic93jMxHlJOfI/M2jnjGsYxL+B9Je8pGOcZD2iX\nXBfzDPo37Z96oj1zn6HfesTD8ZjP89sE9PN+i3SYR1P+zHeYn/NejnXGad7LM04wDtBu+T1q\nobIv+qfdJ7mOaLz/WBb8nQQv+yevm764kjQml0+uuLqj+1L7dMd/b67veJFVT/joDZ57YoNH\nCvehfuLwHw7NYyX7w+X5eLHdI/E5lmvrDf10h7u38BwtOeXl8NwTXLnsWT3FfST8ONd9NWlc\nru255g5JddneHf44HNnoJtVz6cvVVrLZ8/EW544mj8fb2nP5vBR5PhYfJyf3cZ+j8zlcXzvU\nXCQJvtQ/vZ3HHqvPsabfG5+Xyhn9aPDwUvazl9q91uHmwbnMz+XM0FMauv1InjM5/qVoj6+0\nz7G4S8ll7PFgO0eaj+NhjS/Xz+He1x0uzVzHHu820Nv85bI3Hc+fo/Wdy7HEeyj5x9E6G73U\n8sXj6fNSWW/4/ze0PxVV2m+P3ldovx/w54DRayvbbP8jEXzTw8GsPp9h3c7T9YfT8XNertDO\nJ/x5djyW7gPRexqJdfKJ3+lY/PfnxqfFo9bZ0/Vl4CWfWo6az8ei91jsOC0n9j+d0H8r+jlO\n64uQdH+e0K/kZvEdVO23q/m0q4OKjtYX8Wm5aLpJ8kniV42z8n8CfJEe4U2gc2s83kT9PaD4\n0vzT/ziO9B9W7Y8o+bJOvTyVzk+GnxIvoabbjXwy5mv+tdxYv1vNV3HA8n+3kuvdSi8cd78a\nT3iv4ivJ36m/JLr3q3Hkm35EeWg9PKvsXuuf9kM8Wl4PKzkm4XlcyZf1g8oOtd9rvXCe9kul\nd4uPctJ+oSH51eN1vNV+S31wHNfPcdpetd64riS/Jz7i0fGC/cSv9U85sV/j0esgH0+l083Y\n17Q9aD8mX8r/+H5kRpx/ROEjX08rOb6Afow3hWo9j6jxpMP+ZxVd7R86zmm9cF1aT3r9Tyg+\nPTUO/VauB5WcMc7O03LW66X+tJ9p+el1YnzGfq7jtpaHjqc6LlBOSfmKhtov9PqS4qKmT/1q\nfWio/U6PT7In1rXdJuRjGf6p6Wq5qbiYoTdlV+znx/Y/F+Gx/qHjmYpL1i91nOB61D5h8hXf\nlIdeB+NR0j6j46OOo48oOSt71P6i61YeOm7reKnjD+kA2vfZPbVerT8tP9aVHDPyGx0PVfzV\nes3wS+2PXM/tgM8l8K3tCdDaU1Ke97haJ+2C8/T+oufx7wwUKz5UfLd1JT+rBxUPLX1lv/x9\niPajjH3tsXT9WHzs136u63en47fy1/pF+yGfK7k+6vX+dHxaz6YgXW5WfnqfVXah4wf/HkRi\n/CNf9yt8XL/ef9mv2rXcLb9cL8creXNct3KkXb2QTt/S5b6dF68nHX/4e6lEehl2lS6vwz1/\nZ9gr11OYjj8jDjwdvz7+jjrD7yrS5av9yM6n3Wg9q7iq7VjLy9otfwdUlG4fGfrUdss8qkRB\nyknHp6R9Xts15ajyp4z7FRWfMvz4iXj7s7/T89L5s/3KH/j7nsS8Vcd77Y/KLuzv/2y8SMeT\noV/ieUHhfyGdb8uv8tOM/eKFdDr290vEQ73mp9sfx1m8an1Wfmqetjvr//lqPYSUg7JH6t3O\n4zjUqVcrZ9YfT5eLrau4beVSlR5/rb9SH9Qn9c31qziVEU9V/LX8PZu+bm1X2l4ZJ6xd91H2\nRr6LlV2Sf+LnvkM5l6bzY/Wu/UX363Mn+SpR6yddFT9tnfJQdmDrKi5Yu+2fLt/MvEXZP8dR\nTrCDnM/FOj96TtVJl+vR9oL1WLpsT8jnrL6V3WbgeVjxo9ep82s1rrf2SQcddNBBBx100EEH\nHXTQQQcddNBBBx100EEHHXTQQQcddNBBBx100EEHHXTQQQcddNDB4w16/DsJfx9548p/XTKy\n/cEQjmr/50l7P/t/ZSe3/xvvb/7zbwu/MvC1f7P993nh501PRXhYt/My6v6/J+39HOdzXq7Q\nzicEX4njSZfv1yfVyee9WCfxo79bvohHrbOn68vASz61HDWf/9jQ/J8fvm+DHaflxP57Xhso\n8HUZ/Q/6nf4IO07ri5B0/63oa8j5xPcA6LLd2g/Hw644jnS0vohPy0XTTZRPAr9qnJX/3yEX\n0iN8CPgoN4UnUX+2zvGKf/ofx/1d4df4tN6pF+JRdDLWZaGi2418MuZr/rXcWPf7ggG2ruKA\n5Z/jiBf1jHHUN8cT0p603LS/U39JdK29qvXSjygPrYe7gYf2rPX/kPJHLS8rT7Qn4aGdcxzr\nGG/lpf1e64XztF8m+QXlpP1CQ/Krx+t4q/3WxheM0/FD26vW299VPNPrIT7i0fGC/cSv9U85\nWTkqPHod1m/oHxHM2Ne0PWg/fkD3Ax5MivOQn9bzPWr9dym/+FMoz0tTciEejCcd9tPeiVf7\nh45zWi8PJOxLev023gDf35T80W/lqv2A4+w8JWe9XupP+5mWn17nvfF5SWbcToirer20Mx0H\ntN1qqP1Cry8pLmr61G/GvqL1pfxOj0+yJ9a13er1kU/tnxl0ldxUXMzQm7Yr9j+s/OeucF+5\ny/qHjmc6Lh3U8VbJQ+8Tfwm7b7Tj71HrtHFa6UXbRcZ+ruKo1XO8PWp/yfAfykPHbR0vdfzR\n++XvVfxK2g+1/PQ+ebfKDzQ97a96HdSr9kvtjzZvQPznvIy4rdZPaO0pIc+zcQb91NfflP6T\n9n3CgFuf5dT6lH/fpfJ72tFBFXeJT8dZzvtjIK3mJ7QfZexrOn/4m9Kf9nNdT8gbM/R7uOdK\nux9Cr+r8l6HnO8PfG/7Cyu2g4j/JLnT8+G2Yri5KjH/ky+Y/yr71/qvj9j3Kju5T/HK9HK/l\nfTC386y1K0Lis3SxroMRTNKDrf9yb9iQSE/blbLfwz1/Z9gr1wP9pdat4sA96XmHHffjsP31\nGX73s9BfK3T8yphPu9F61nFV2bGWl7Xbn4fr+oj1Y6wzQ5/abon/tpCP11qo41RGHgv963hM\nu6YcVf6Ucb+i4lOmHyv7J18HaX9qnO1X/nCHipNJ+0OSP2q7gD1bOjoP1fq1eNR9CuucTzrK\nTzP2Bc4jnTsUHsoVeYjFc4eKg3p9nK/mZdgd9c88J8NuIQdlj1bvnMdxrB9UdsU6163jso7b\nkIuHj+WT/kq8XK/OG1ScyoinOv6Sv7tVnNV2pe0VccLO+72yc/Kt9/+k8z/lzP1H51Gafka/\n8gvycWv48/1pKb5UvKP92bwDdLQdWHtPjwvWbm8Ou5sz4kmS3vX+SjvI2K8TzsU6P7L2oOli\nvLYXHX8z8j5Vp7613Wo896m4pdep82s1rrf2SQcddNBBBx100EEHHXTQQQcddNBBBx100EEH\nHXTQQQcddNBBBx100EEHHXTQQQcddNDB4w16/DsJV+P92q/g/ePrNp/yu0euea79Orxn+fk3\nF4/+8+Rh7dcMetuE/Iol7V+ePPRT37vo58TT/kW/9j/fOLH9i8O/VNI29v72L4Xg1e3XNvzm\n75vmvsP2f2V6++sffP+OnvJp+fvC5QduPu+Nz7Rf+/m7Vz/5qzsSx5P+VYVDghl2HdfV/fhj\nn797TfuXv97Sb23hEK7Djv9CZbDwL1IO3fL11dnnrPeXbNd99XuW/9VvOly9tH8pfB12HOVl\n9YJ1t3/tmmf/sfNdnXZdX48WZiHXST1ej/9/7Gvb9/ldH7f9X9/9YZ/jOSn9gA7XpSH5Id6v\n+UK77fnH2yNxXp7RznWQrsVDOwMfXBf1wPavhT/ceSDDHu36A+s6YVlqPOiynesjf1Y+yh4w\nPqXXQByzzrDztfxIn+sBf3b+1x8JBry7/ZvwG0uX/HI9qBM/6dr1kB7WdX1g/k//KUMenE+6\nil/Ll123khv9QMuP4+kv3emB+vpGyGaj1bPl/1vzP/3/bnmLtSO7XuDTccPaBexI2yPbrR4B\n7Tjgp31zHWwnPcJr8DsCxgHW7TqwPsYjLcdPYtxVQZhc/B27Xq6H46xfKP8hH5Qr5YS61aON\nW1w/+LhS2THHWTvFOK6f8tVxhXYHe0rZj9L/5/D+PeVDuVh7wXqtvyu7Ij7S/wbwUc5cP/Vg\n59EusT7Ss3LFfLt+2hnofxZ+pP1N823lQr9Q9K280E+8rFv/SPf3DHlS77AD2891cN/V8fdz\nSl5cP+3JX5tvybfauEA/YHwgXsYV2q1eH9tpx4yL7P/sk7+63UeVMd7GX8Q/7sf0L2vvkJeN\nu+Cfdmj1Ar6wz9p5iDdWbirPsHgJuW7K7dMqrhNej3XRbmiflBfly3bUM/Zzuz+rdVEP3wzY\n3b7f4vsW5PSN5x8LIkj7DUt/evVDn/h6Rny9IWSvwMYZu1/CfjnO7iPop17IN/nS+xX5s5D7\nj8o7tN8SD9f1zfB3QD+ycrX5gooDVk6w189h/Vyf3sdJl/HB2ouKj+TrBsQn+gHjIvPbjPwB\ndJjfcV2Mc+SLdmXzNPiJjUuwc9YpB7svgJ7u13kXIeXK8fQ32jXjVlL8pbzIv87nM+IQ9yna\nDfRCP9b7CPFaehFfKXxYH/VEO6D90x6oJ52vqfhh8dJO7T4LuVNuNg5Cn7Qna19YH+nZ8w7k\nrPPlzzAOwr6oT9p7JPZVtk76eh9mv8pHU/s22sm3zUu4LuWvbKf9Ez/jGSH9h3pgnCGfNh4y\nbpAO8SAeoJ6R/4KflH44j/kq8Gl7T/JjnTden77v9PicRT657htxvtTroR5vvC00fDv+W/A7\n8mfjJOWL+Es5cT3Ux6chV2t/kEdUrU7ZHeyU8zPyReC5HHQ+BL7s+ZfxjPETEH5k13kD9lXa\n+bejvzvWrRwZV7lvMU5+G/bKeHFjOj07/xvq7xqRD7Wv237IPVUHXeilt+5H2r8L+VPPn1S/\nIyfdyxCvlF7tOO5jNh+C3b03x3uGm/4UBpaMdtoj4/93w99tX9D+AS1P2Cv3OdoX7VTHfxWv\nU/c80CftWedvhDZf47kQ/s18hX6u/JfytPRoR4wHN4Pet6P4a8d9J/0+yI67CXESdmfrUfio\nav9WACq3WPlQjrRbroN82Dw3WmfKDiBPwAy5fR/rtfk4/NyuD+u/Kej+3aNWvsTLOEL92vye\neWD6vVMqjjE+Iy6FtYbf2rrNW4GH/HAe18t8W527M/Lrq5T+qN+PQx+cTz+4CfurPcdADt+J\n9lEdD1LnJrW/63ya/dS72lcyzlfkA3rJ0Cv5tfbC84fy8+vU36tQ+Wcq3sEOdL75CZXPJcQ/\ni+czvGdivoH16ntPxh91D2vpI5/V5ycbt/X9FuM9/cbej0APvKe1eTrwUA/fCUFbxv0k5cA8\nSscJdb7S9ygZ97KM27RftT9YPRA/7Zh6ph64PsZP+h/lbfdlZSdcH/2K/No4ADz2fAE9Ur7s\nZ93mD8j/yRfvncB/hv9RT5h3rL93cNBBBx100EEHHXTQQQcddNBBBx100EEHHXTQQQcddNBB\nBx100EEHHXTQQQcddNBBBx080tDD30kwU743MHhT2bQFr3U++w/T9JbXLWmc9QMz+ezgvct1\npvGLg0Yuv2iTaXrq0nVLHn/ETPnMqEfvee87icc0nrXl7Vs/8FUz7qve9j+960umNXpP17S+\ndsm7a5Z9xDR/8P6/XfeOT5vR/zr4l9+9/dc95dM0fTd4z/Z/TZ1PZHnfS0zzjK+8Ye3O/ySO\nb37xw6MPrH6vaRl3ZdOqNV1mYvR+qWn7ccDX+WbKk+GLo2Zq6bfPnt7+BjN14V3/ZW642JT+\n77izPzmsxIy7dPSf/Snd8tX6/lNn/3L6Nabx4fAFXzP2oUBwJx6uXkz9JcF7/7eb+v0/6hpg\nlpsJfw4XYNruDV53nWTG/ffC+TMfmmHGbfngm4tH/8WMDd4Wv+0FM3PD5IABM6Ng1DtL8/9i\nJkf//5ipj160NVNr7zt53vp/mwlPBT+wWGDqov//zTT/5vVv/eadPzP14evMt5j6v4bv05qh\nc+vOvGXoDNMw/oK/7Phyh5n23BubR5e/2tR/ed6Pfv7vX5hJvw1/P2Rapwd6eauZXvXxgxc+\n8bxp+sfvt/167mOmJXpf3cwYdvrJ1854nZniW8/Df5xvJn0hfF/YTP7zO++46T/rzZhlAd+j\nzcSim/M+u3uSmfqp4LXmEWbSiGDdrzKt584c8YbvLzajo/9Izsw4/YrzV1z3mGl9iy+eUz9v\n2r7w5Ws/ddrHzHjjq3vTtWbqb3125/3YtC096xdbHplrmn1u//fZGtN24tnBG+Bmxg/C98vN\n8MuvGd962lQz6oJwoVb+dU/f8q8Hn+k0U77/tTN9zs2oOyO6Eyr+UfDVG/5pGp98YsJ5//i9\naX5fYO9fNiM3vP+3viWk7O/Ky1oO9h1hmn8W/n99pnnV/+0f8twKM/rsYSVX5F9kpgbLWXSx\nGT+27akrL5tkJmwJ/ydAM+Z+n50pXaa5b7Cck8wJm3x3+dUFpmVbIKClZvTPfLVP+4MZF/2e\nwkz5U4dvAGNMa1v4eyYzxveKx0c1mCHLgv9u7pemPv13AaZ5aPBCdpOZ9L1AjYVmZPgfM44y\nU1pP/dwXfnCamVGeX7H42xvNoA2BQ3/QjA5f8G41kzq+esP9/Z8ydVePuPeK2yaa+ne82jeg\nG8zEIT/zHedGMzR8r/2dPv3w/+Ezrct8r9/Yx4z7a/jCuhl99wu+hJabyb8M3/s2bdNWv/ex\nU843zXcXrR47+Aem+dHgBfODZsI7AzubZ8aH8htmxt3x7y2j3llmGt4e2Utz/XXvuLJptZnQ\nf+6j1f+33zScEPjxJ8247wZsnWTqfaP3fnuDacl/6oRvfGaamTR78gNrf/8b0/qQz/7T+03L\nY2/+vz89/jYzdcvEz7/21TvNmPCHCQVmdPQevRndP3CYy0xTv3sDxZj6MCzWmOHh7xHeZSaP\nCtbzZVN5bSCns03D3u/1fbD5PaZkdPvffz6ixvSF/zQ9EizjJ2ZMsx8NL+hrhoRknzOjLz/3\nyqdLd5qJ+4IX4GtNw42dvxlwzXgz9pqfveaqb5aZvqFeHzGN510VKNxUnXe9P6HMTGz7r2su\nL7/L6nHilUNn3PWv4Wb4XZHcR197axAozNBO391WP5WKy51RvKPcGv+z7vrfvP4S0/SOSE5D\n3x8YyE9MQ5PP1vnfNg2Pvv1Xe098ztRB/6PeeJkfSS+y+Bpqt07wKZmq56N4XLU6fBHfDA/f\n+/+dqYn+o09T88C7AsM0tcVlwUJMXRBO9l1nWu/7wZqfX/KwGbM0stux7QOri27ONw1V4frM\n8Oj3iGZc+DOJmWbQVl9LDTtMTfR7D9NWGtC5zc4fPPIt94z5yj9M45t88Q+82wx9VWQPrX0i\nv6u+6uJPLF7p04/+v2lT86n6lle1XWaqPuRvZxtvN0NC/9pryhEPh6yd6W9w/zHDL/3h2Is/\nscQMuG3inE8+cIsZHGh7ujEDot8xmAGXBnG4xQwcE/4+y7T+es/vRj36d1P668gum7cEghls\nRlwb/j7GDM2/cMyCsqtM1Wc+/qorzl9p5Tmiz//4EWqrqbnwvfUfWnWzaf1A2u+MzPCayP8G\ntk9adN/VI01dy1tPyTvxctMYbM+3PGDKYJ8N5cF2dr2p3R75SfUZQTy8wjR8/Ke+hIvNmNe8\n2w/cFWbw2EgeY4aGP4A0NYir9b6zXXDhe83AB5vf/Y+Cr5lR74j2xeFzht2xsvZXpjqwlsF+\nnF4ahKUSM/CTDwSR0fSNfvdmKm9q9Ff2MTPgG3/4dNc9T5nBp5znJwyvMlUB1voPm5pLgrD1\naVNeetsHh4z/iGl86Ol9C+fPsn7XelFoCKaqMYoHTSeEHWbiLYGdjzADFvruUd7P1M+J7Kj8\nm3cGCzMjP+aH0wvHmuHfrX9x0qL7rdwGX3tTsOCU3f4wWMAQUzcm2KCeNLU3B+v6talpjH5H\n9GykF5PXLwxApk9hQKDGNH72kWBjMLXhtjrbDI1+j2KagujQctA0NvhZw7TdphHraLz6O37A\n+UPGft5405s2f+srbzAjPxTY1+OmIfz51R4z4t3h/wtqBm3yd80GzzT9NdpvhrzvJ4Vv3uOZ\n5mmBPJ8wM74T7J+vNZM+HGwTf0RcLDVNt3683/f++nkzYl74/5GaUWH+dp8Z9UvI/44gTHSY\nGuzvA4IsZenPzKDQTg+YQdHvrMyQj4z/aOv3+vp2/vUgUzOjvlU1rfCfS8zwEO37TE30/8+a\nYV/78ZT/d/rVZvDbIv8auCPYrzabquj3h6Y6/AFUqakMh73N1ARhrby/ad4U5AGnmUFY94B+\ne0989o2XmcquaN+qO+M1J93+pi2mvClwq35m4qIg0etnysIwXW+G/yuIb3NNY4j3UtPXN8o+\nG/ea8dHvr0yf6PeDptiX1pNbXzCDPhLF1cqB4QAzvE/4eycz+v+Fvzcy+aEebzK1f3i4+D03\nfseU+l71358tMgNro3WUH4ziQnX0Oy9TNWRj8RMfWGAawrTw+6YI8qgpXekHrgozbniUH9SE\nadsgU3Mg2N/OMzWv+/oLP9m1wVSHP+e7zTQg7xz1htt9g/iq6ReK+52m/o9R/tI3+n2XGb13\nQJCYmOr3B3HxoKn7bBRPBnw8zDNM/dsu//OHn5hghsFOCp/50u33ndxhKl/ws7stdaY6/I9o\nzzWDrwkStYfM2BnhD/7MiFlRHMiL/r9c03Kyn+1eUWBqpgUB/NRUvv2FIE3cbOs1pwbb9oWm\nXxAWF68yzV8854f+DmuGI84N3BHlA2Wh2OaYiXf6Zvk5Y6pDNbRhf7C/bzNjzt3oB8zHTP3r\nb11/yds+YEY/G9lNE/Q8CHqsvXjarp/8YZap/t7TwS+FTe26KH8tC7yhv78/f/tnlX7KbvEO\n2R8mtKb+3318AnWmccH+YOc1Q28YfMZdtdtMS9EffAdcZvreFwYiMyHYRkbfaRoHfmbqx/t9\n34y67EPf+cjP7jZ1UwLFX2VqLwzizAAzZnlT4NimIdgG2t9oRn0hMNiLTdGUrtf7kcQMD8Rz\n4LtmROV1j/oq9/fZ8HeGpnpckDZ0mL5Dwx8omoavBeFkmBkYpo/bzZBb/Wj33c+buuh3qWZk\nQZDPfs6MGRPse9vNoLujPH7I78If4JlBr6v55v5/Xm8aqF/43cAwvg02Df0jfx364Kva3veT\nIlP+cOQX9Z8Of6dnRr8pOBe9z9T9JNwQTUn4g71TzZCNAZk8U+tHd39LMpXR/zNthlcFghtq\nJoZx8vOmAXGobm6wje81DQHYs8MMX+Zn2XUbUvE2PE5NN63Rfp7KW0BvAPy+dkV4UDPVv/vu\nnBlV001J4N0/HOvv0+HvOc3ADR1BBDDejwI9/dnUd/mng6/9xD8f7drwzJfuMIOh377B7rqs\ntcfnrLpo3zBDbvDFVfhfpjqQeunvTV1VmBelxrUGceAeU7PJT5NuerdpeNZP6yq+bmqDbfu7\nc8wgxJ/adaFCzETEv7pfBPGr0QyIfsdphna1BIoxdbdF+3b+/iB8/cAMfTbSa/2atz3nb6Wm\nsPzVBQvuPMvGj6HPRPt18UO/Cw7epu4Lg4LAZYb4wdW3TFO9KPpd5r3vDfev9r+tjPIp74Iw\nsTADzt0ZJGSmGfZatyvc6E3Zd3453TfllF++Kwx8pjL6PbVpyO3/nTYNP/C3lZ9+wfTzpXfb\nBwebUX4ydvOtZ/p2GCaYZtgzoWBN3YQwb86YX5v+u3xTXx/4//Om/rdp9pPaT8M0dKCtT10S\nHJtebyruDTa2P/bW/YipWx7lcxPD8/er258MxVhs+6vGh3Gw/d99A3kWmiHLw/ND+2Nhetjf\njiv6hH/ce9P/mtrF0X5RGRwvO15sf+wrYQLXPR+fCvPbjPbIbt/c/mR4beHnewPCfLz9P9E+\nn8qHvh7cF0wzRV74MUM/FZ3LqoP0acwCM/icwHBSeWfR4lCBGfT6/zm45/mKGRleC9xlyi4J\nNyIzIrITM/Dit1Tv/rCfR4bs5JsaxIdhgbV91d9vvxHY92dN5a+DfSvPlIXHWZ+/usCv3mP6\nheElJbeJL0Z577D33OhH+l+YUUEY3zrRNFYH5+lUHh3FtctSefO+cOM2ddEPsE3drH2BAExF\nuE2PNyNqtvmGMtDPU/zdc/udZlBwOrupsf1J4B+6IrrP8cZ8JTgImuowf7+6/ZnAyob9yRSu\nCPKpn6bkEmRPDzabfgsCxU/MkNvYIE3c9VM/H4v2gRqcw8r8XdI/OZqy0H6KTM29wXZQbUrD\n/eFcU/tfYcJu6vdF57KG94UHVtN/R38/ge40VfnReaQm8mtLryLMx68wNcGxdOA9piK0sy+b\nUeG91pV2XvUbo321cnZw0Btj+iEvyPvvE8f5qVv74/4p2t8Yjbf297/+4i8/aSqfDQ+EJq9P\n2t8pMQM+F55/25+N9mXbXhrZR/sjwbVEfUv7k7CX8oLgPuEZM+B9wYb7P+0PhfvjN03Fxugc\nVbs+yG9LLJ6yG8JEwNbzJkfn+cLwmuACU35ecOE0z/SdGeXnAy/a6GdUV5rh4TXlPtMX664M\nrp86f2Px9MF6K38b5ZOVvw0TBdtf/MOQEVMbeO9/zzZ5F0T5ct8Qz6/NyOrw3sKOL1R/X+rR\nq6N8Nj+Mg/V2XEkUv0xJFCfanw3VdX77wwEbe37X/kh4/VNqCiI7SYoL7Y9OxP4S0v2AKQnT\n/Zb258N9dIypOSk8p7c/GBxD//VWUz0zur8tDHavD/7T9N0VOOZ1pn+Yn/7e4n0qCE8vnGWG\nPxHI8ZOmfyDGC/6SkksQ7q9+2PQP71d+bfpEf9fAVP0wundpRDyqDO+Nnjbl4floXfvzQdZ6\n3n2+3qO4WvmJICB+wORdgnzkiuDA/WD7M8G14LpvmKIgCq2/1BSF59RF/rkhzOtS+wDO+YPv\nCO+1UnrY+nyAwdQ88by/wS9uf+IjUf4+aHxoJ3Zc9fNRHl4eZIMfbTOF0T7c/mJ4jdlo+vSL\n8t6S8O8lfLv9SRPdk5UVRPdhw+6N7u9KTwjts/3RQdG9QlEgvg2Xm8rQPC8yhaE7fcvkjQj/\n8kH7M9dG5+jKaN9sfzxY5iVvN1WvCf8gjukfyvchU3x3cP78vskL/6xEU/vTHdG9VemPwnvP\n9hfx9w8ewD1rv8fCg3fK/xBnBr82uvfMC/PdPx/r7x0cdNBBBx100EEHHXTQQQcddNBBBx10\n0EEHHXTQQQcddNBBBx100EEHHXTQQQcddNBBB4809PB3Etof9sKPgw466KCDDjrooIMOOuig\ngw466KCDDjrooIMOOuiggw466KCDDjrooIMOOuiggw466KCDDjrooIMOOuiggw466KCDDjro\noIMOOuiggw466ODxCj2vMN//J88r9Ep9WLS7a9fW/f5DpV+q0Fi6Zt/WrgO7tu4+gIb+a/Z1\n7d6/d2fX7gNdB3bs2Y3m8oVb9+3asVs2Faza8yo+rtjD+UUrgqmc1dl1YOuirn0Xbd3Ppoqg\nae7urp2v2b9jP9pqO7tes3/Bvj27MHTNHjVgAAdkclF4Std+DiuYN38VyazYunvrAX/G1gNb\n96GtZNWOvX6rHV6y+sJzu/bNvehc1MvC+sJ9Xbs4omjBvgt3HFByLN2351WTKMu+fsm/2P/n\nxRefvDMaWPAiZMwJZed0HeiatM3Hu9WvvRCU/w9KlL3m5jYDAA==","type":"binary"},{"name":"data_gsw.RData","content":"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\nvW/gTgXPKy9bmBwvQrhLwd0ybg1TcGW81SPjkn5DuLK+xH8IV9a3K/M5lP4OZX6HQq9T6S/p\nO4Sr/SX6rLL+CLfaFdyp4G4Zl/zRZlXkYZXji82qyEPJTzarHB9tVjnf2Kyyfdiscj61WeX4\nabPK9h7ClfVk+dgUe7HJ8SqEOxXcI+NWZbwUL2w2OT+FcK+MS/kxhCvz2RR67Qo9duW9Qxnv\nUNaX7cem2I+Sz212hV+7HO9CuEPGZf3bFX3bFfqUfG9zKPJ2KPJ1KPJR8j3hsv04FPtxKP7k\nUOzFKcdDm1OxB6cSP5yK/zgV+pyKPJT6IIR7ZFyWh5LvCZf90yXXJyHcK+OyfSj53Kbkc8Jl\nebiV9d0K/27F3pX8bVPyM+GyPXqU+T3K/Er+tXkUeXoU/jyK/j1KPPXkW9+p9Jfl71HihVeJ\nF0o+JFzWj5IPbUr+sofJ4+3K/sAeJs9nD5PtK4Qr4yX5hHCvjDuU9xJ/dqscjwiX6hW7VbYX\nuxJ/7cr+wq7EP7tNtge7Es/sNtn+7DY5f9nteb9XGLhDxmV52GX5h3C3giv9Hcp8DuW9U5nP\nqb6X6HUo+nXI9UYId8u45M92h6JPh+y/hMv2pMQnu1NZz6nYk1PRj1PRvxK/7E7FnpyKvJxy\nPrG75Pgpf983cK+M25T+dqW/bL8uOb6Hvu8r72V6lP2I3a3Ykzvv99FcXObfrayv7CdCuFfG\nncp8sn14FPvwKPrxKPbhUfzfo9DrUfxJ2S+E/l4grafU+4TL8vDK9Ydd+b4R+r4fJuOS/hxK\nPewIk+UT+l7vlHGJ39D3eauMS/bgsMr26FDikfx93aZ8T8/FrQouyTP0fdwh45K/hb6H22Vc\n7q/UOw6l3nE4FPk55P2xwyHvP+Tv6bm4pG+HUu84HLL9hf5eaVVwt4xL/DiVesKpfB9wKv7n\nVPwvhEv93XK9GPp7pVvGJfk4FX9xKvtz+e+TubgUv5zKftyp1A9OpX5weuT9GOFSvHcq+2XC\nrSrulXHJngiX11P2vyHcI+N5/JWKcWl/a+DK+zzyMHDlfR75GLjSP4++c/E89pWLO5T+DmV+\nhzLeqfTPk98NXOovxQMD98i4zJ81b/7PxfPECwNX3ttVXFnPEabg6nuFnjz1E+E2RT9SvMnF\nZfptin5sivxtCr02hT5pP0e4PW89nYtbbTIuj7fnrYdzcafEryNvvszFZXqleJSL210y7rAq\n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\n/wGsCB0X6fIAAA==","type":"binary"},{"name":"data_ps2.RData","content":"H4sIAAAAAAAABu1dB3wVxda/99Kr9N6lSk3vmU3o6RWQHkjoJZXQpat0ROkdpIhUaSJSFQSl\nI72T3JsGhF4U+M698z9L7ioqPnnC+/D35g1nd3bm1P85sztJQhq1ssvbKq9Op8umy57doMuW\ng/6pyxEe1qSus05HF3Q6vS67Lg/1uSMj4iM6RMfZ0tiiRBfWGbIVoLGeljEv1wwv2bK9ZMv+\nku1V8/+y87/p8v6v8/2/wP+r5P3/k95flvdXyf/f5e9VrPs6+ua/jWH/duy8DjHzT/D4umDR\nf9Mn/0n7vuo89Drluf8EV14XXH/d8uqr1Mub7psvO//rxs/b+WXL9jd6wx/02f+DXv8X+r/r\nS3/Uv4w+tc//2dwvY9uXme9FPPyd51+m/zP7/53+Veerl8Xo1y3fvo45/e38L25azHiTZaFm\n9X40Z6+oflG94uhfhSx35dVcDfv2iY/t2wvkO2GxEX3iontF9ImPiO/etw8u52saFdu7e5+s\nl/KaL9W2DNcslKNzr4g4XkddvUtE5/i+sfSvp6TZvHgv+7L/vWz++P82/+vGz6ua/03l+39h\n/jd17tdt/r/z338znv4Tfv6TdV9H/3kT5nxd4vJl//un5n1TfOnP5v6n+ftvz/V35n1d5/9f\nkeN1mf9V8v0q534d53/d+Hk7/9//T/8H/X/S/mzuV8Fv1jF/h8d/ku+Xme9FPPyd51+mf1Vz\n/7d8+U2NxVe9xtv5/9n5/3dk+fvvP18tX/+duHuV/73p8r7l+3+P/zeV7zed9/+U/9dFb6+r\nfv6b/L4pfL7KmHmdefun+HsVPL4Jtv1v/fcqseS/2V71f/+2fK+jTt7+9/a/v/Kf/g3r3/73\n7/73Kuz6tr1t/0tN+9+/zc9/2NSfy+9CrTu1ntR6U+tLLYaa+fRoArV+1BKp9ac2gNpAaoOp\nDaE2lNoH1IZRG05tBLWR1EZRG01tDLUPqX1E7WNqY6mNozae2gRqE6lNojaZ2hRqn1CbSu1T\nap9Rm0ZtOrUZ1GZSm0VtNrU51OZSm0eiHKJ2jNoJaiepnaJ2ltpFapeoXaWWRM1ELZXadWo3\nqd2ido/aY2q/UnuGI8f0f4bs1HJRy0MtP7V3qBWiVpRacWolqZWhVo5aBWoVqVWm9i616tQa\nULOj5kDNiZozNRdqrtTcqXlQI90bBDWFmje1htQaUWtMrQm1ptSaUWtOzYeaLzU/YnAhtUXU\nFlNbQm0ptWXUllNbQe0LaiupfUltFbXV1NZQW0ttHbX11L6itoHaRmqbqG2mtoXaVmrfUNtG\n7Vtq26ntoLaT2i5qu6ntofYdte+p7aX2A7X91A5Q+5HaT9QOUiO76A5TO0LtKOm3GDXSnZ50\npy9NjfSnL0utPDXSob4SNdKhvgo10qO+GjXSpb4GtVrUalOrQ60eNdKv3paaPTXSsZ70qyed\n6kmfetKlnvSoJx3qSYd60p+edKf3pxZILZhaKLWW1FpTa0ctglpnalHUulLrQY1iQR9NjeJA\nH0+NfFhPfqsnv9WTz+rJX/Xkq3ryUz35qJ58VE/+qSff1Jv9cj61BdTIXnqyl57spSd76T+n\nRvbSk730ZC892UtP9tKTvfRkKz3ZSk+20pOt9GQrPdlKT3bSk430X1Mj++jJNnqyjZ5soyfb\n6Mk2erKNnuyiJ7voyS56souebKI324N0ozPHOulHR/6m86JGetKRz+lIVzryOR3pS0f60pHP\n6UhnOtKZzuxvpDddADXSnS6IGulPF0KNdKgLoxZOrQU10qeuFbX3qZFedW2otaVG+tW1p9aB\nWkdqpGsd6VoXSY30rSN967pRI53relHrQ430rjOfUye96/JRoxjUEV7pClKjWLScai9MrQg1\nikkd+ZaOfEtXghr5l64UNfIxHfmYjnxMR3GqIz/TkZ/pKFZ15Gs68jUd+ZqOfE1XlRr5m478\nTUf+pqtJjXxO9x418jsd+Z2uLjXyPV19auR/Ohtq5IM6inMd+aGO/FDnSI3iXUf+qKN411G8\n6ynO9BRjeoov/TbYZx81ihk9xYueYkVPcaI3x8hxaqepnaF2jtoFapepXaF2jVoyNSO1NGrp\n1DKo3aB2m9pdag+BZ4Rl+mzUclDLSS03NdKjnvSnJ/3pSW960omedKEnGfUkk57k0RPveuJb\nb+bbjRr5jJ58RE/4oydf0JMf6MkH9GR/Pdld/z5iiOysJ/vqO1GjfKLvifihXKInO+opj+gp\nh+gph+gpf+gpf+gpd+iH6WSMk771pF896VJPOtQTRurJT/Xkl/pmWN+8LvmZnnxMT76lJ5/S\nkz/pyY/05D968h09+Y6ecpeecpaecpV+ENaiHKWn/KSn/KSn/KSn/KSn/KSn3KSnvKSnvKSn\nvKSnfKSfTI3ykJ5ykJ7yj57yjp5yjoFkNZCsBlrbQPIayK8NxIOB5DYQHwaS3UB+bSB+DOTX\nBvJrA/FloNxqIN82kE4MxKOB9GIgPg2kGwP5uYH4NZCODIQzBvJ3A+nKQPwbSF8G0peB5DCQ\nHAbSl4HkMJAcBpLDQDIYSAYDyWAg/g2ETQbCJoMZm+5Qu0/tAbVH1H6h9kT6hYFyv4F8w0C+\nYSDfMJBvGMg3DBRfBvIPA8WVgfzDQDFloDgyUBwZKIYMFD8GihsDxYqBYsVAcWIguxkoTgzk\nQwaKEwPFiYHsaKA4MZBPGcinDLbIhRQjBrKtgexvIJsYhmSRifzAMBIyUc1gIKw1kF0MZBMD\n2cRANjEQ3hrILgbCXAPZxkC4ayD7GAh7DYS9BrKTgfDXYLYVYbCB6gMD4bCBcNhAOGwgHDYQ\nDhsIhw2EwwbCYQPlTgNhsYGw2EBYbCAsNphzJ8WcjmJORzGno9pBR3Gno7jTUQ2hoxpCR/Gn\no/jTUS2ho/jTUT2hy6RGNYWOYlFHsaij2kJHNtCRDXQUlzqKSx3ZQUe1ho5soXtKzRyn1Omp\n5tBTzaGnmkNPNYc+LzWyh55wTk/20BPG6QnbzDlTRzGvM9uUMFFP9rHkQMJh/RD4Lcmtp7yv\npzytP0LtPLUUarSegeYwVIFNKAcYCNsNFNMGii0D4brBjOlUP+kIf3SEPzrCHx3VUbqrWNfs\nV3qsS36g98K6Y16wLunEkBdrmv2EMEWXgrleNKdZlu5Z5iQb6bf+zpwlns9pqZfMcgRmkYNl\nOA8ZXqQz1tvSLPz//GL+LWv5/4Fe7KEXrQy/Z4+8WeyhkeN3+cqiA9WetfC8xo4GwmcD4aWB\n8NJAmGzGG0uBy/7zIn55za1ZdJHyOz7klYVfrGvR9dUXrDFEM/eRP/DJQMxJecYQBllaWuvc\nYkv2wbAXzP8iXWVdJ/j5Olax9aK5s/iI7vQfxMqL/O0PYsWKTzcNL783x4t89Xdso/pEBHwh\n+x/E9J/5Avsux0RWfbLNWvyOPn5vnZe1W5YY0dGeT3cSdjgL/7sg19Jdkrozr29e0+Iz9uAj\nDHrtDn7GQL9zcW8p7m3FvSO49zPsloJ7mc/92MyzmVeLHWo992kzH2a+zbhnwY0M8P5I2sbC\nx5AX8LEK97ZCR0dgh/NZbF4iiy2qwB6sK7YL24bjCrGlOwas/Fn6hlmPjBlmfZpxw6xPi7+k\nAD/IX8w/B2vRbYrk0+JDn0C3qyDTHtiZ/dMe+gqT/JrlsuhrjOTdLLOZd/PzzLdZbgsWktw6\nNzmPzl3qX+cj9a7rJOfRDZLy6xZA718jho5Jn7HIGCDzm0X/Z4BZ5+Cn7KtZMX0IZPkEsiyF\njbbCRkcgL9sDsWHx29/D9T/AZ7OfWHR8R/fXsC0lS2wEIOYY480/p2z+LY1U3+movjOfdbOK\nD17r93BKm7tWaeIy67pZYtIch7/BD+2zjFFu4DkLVlj0EPECGagusvwEc9ZYP5dFFi3m5v8d\nXn4vD2fFTNsXYPkdzJvVFn9Ul2TNZQGwrR4yaWuSrDbX/w7f2nW0+KvxMXMM6Kje1X0u/V9H\n+0zdcejtrMb2d3TWuen3bJ61VtH4supPGjl+kz9fhPFZZclayyH2Vd6zYnxW+/ye3f9Inj3W\n8ph/XN5A9bf5XQLV/Pj9pQ1sXBs0oP9lpW00tK2GttPQ9hraUUM7aWhnDe1iTdtkXd+mgauD\njaudizVtb0UTf7bWtI2Gtm1gTdvZWNP2mvsOVvOTvE7WtK2Nhtbct7O3ph2s+CF92VvTNpr7\nNs7WtK2DNW3XwJq2t7OmHTT3HRyz0g4afTm42jTQ0C7WtJ2DNW3vbE07WMnj6Gpjp6FdrGlb\nZ2vaTvO8tT2IdrSmrfVJ/mWjoZ2taWv7O7naae7bO1jTDprxDlbjnTX+4KyR11kjr7Orrb01\nbW0/Z41/O2f1b3J+q3gg2k5DO2b1JwudxZ8stK2dhna2pu00z9vbWNMOWtrqeaes+rDQtjYa\nWnPf3t6adrDiz1kjn3NW+1poG819W1sN7WxN22nmt3OxprPY30I7WPHnouHHRSOvS1b/krTm\nvp1mPmv9Eq0Zb6UP+wbW8ptpJ2vaxsGattIH0Xaa5+2crWkr+9pr/M1Ma+87W9PW69tkxStJ\nO1rTdrYaWjPeXrO+vZ2G1qzvoBlvZT8zndXe9pQv7DS0kzVt5V9mWjPextGattWMt9Xct5bX\nViOfrXW829tZ+6+9vcYelB9srGlbzX0r/yPa3taatvYvB40+HDTyO2TNRxba2r4O1v5tpl2s\naQer9R0162nwyt4qX1hoa3k0eGXvqNGnVb6w0NbrO2n06aTRp5PGvpQvNLQVXtg7afyPaCt+\nna3xmWjr9Zw162nwzF6DZ0Tbacbba+azwhN7DX45NPgNbYWPRFvhs5l2saYdsq7voMELM22r\noZ2taSu8INpW87yt5r4VfplpJ2vaXjPeSv/m+tDRmrbyNzOtGW9rr6FdrGkrvDLXjzYaWrOe\n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\nFXvFrfirbVl/wp9o+YY0r20DW/u6DRzqqmdA1CvqV5XnV2ysrzjWVd/sPr/iqL1i85unbH7z\nlI2z9optg99ccfjNFSfrK0511Tf1z6+4aK9o+aErjr+54qy9Ymv3mysO2itajTnXbWDzmyvO\nf+FdtcGMLzk8FfPva6H/3vb/Uu/xtv+f7j3f9v/VXhn2tv83+0Zv+3+l99a97f+NvvGwt/2/\n2fv9P+ub6972/2TvO+xt/0/2wcrb/lX0gbq3/d/pg3e+7f+JPnTY2/7v9P92ffr/vb5tprPu\n/219vrXHm93/2/Xq/5f69t/eZ/2n/b9d9/zHdZPyivudb3YfqnvD+2Fvdh+2883uw5WX6zn/\nvKWt6RbD/hm6+RtC/1PztNS9HP13n3sRzXn+n6Jf1bwvu06rnW8m7feG0G/rtj/u/+266P99\nXcX9sDe7/7fro/92ffW69Zyv/9d6bR5903rOR29o/x/8jgLDS7ZX/bPsr5r/l53/TZf3f53v\n/wX+XyXv/5/0/rK8v0r+/y5/r2Ld19E3/20M+7dj53WImX+Cx9cFi/6bPvlP2vdV56HXKc/9\nJ7jyuuD665ZXX6Ve3nTffNn5Xzd+3s4vW7a/0Rv+oM/+H/T6v9D/XV/6o/5l9Kl9/s/mfhnb\nvsx8L+Lh7zz/Mv2f2f/v9K86X70sRr9u+fZ1zOlv539x02LGmywLNavfUZBdJ38yXu/F//Dm\nfzTkfzTSvexvfjX/pizzb4jMpXv+W6f4Nznl11kjxdvx/3/G/97YN4HvN3X8v8nL66yXVzVe\n/4rn/yvxlJWXXFmu/ZFPaJ/je9pnX8Sn9nke83u8/dFcr1I/f3Xev8LDfyMuXqVv/JW5/2kb\n/BlG8Xy/N88f8fey8fmi+X6Pt9+b+6/KzD6X9d5f1dsfxdeL/PFl8f91xM//ZPzrytebOv6v\njP0n+XgTdPJ2/P/P8TnxTC48lxvP5sHzeTEH5+38uudv2XLgXk7cy6V7XmPl+Bvz63EvB+7l\nxL1cmD83xuTBmLwYk0/3vB7MjWfz4Jm8eCYfnsmPZwx4JttLzq2V60VrZ8P97C8p29/RG+fi\nrG9wc2SxN9uc7c62Z3/J+puo+befat8I8VuWl5n/RXNn0z3H2Jetc96k2Ponx7+OPL0d/+Lx\n7OP5/wtrveLxVm9V8/OrU/7VpAb1z90ZbJ5f41+kqlf/wb8AVc9/vUzPvwBVz78/Vc+/kFXP\n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\nRfP8p/Nq+0j4y7/Vv4gP7fUX8c005/GpZjf6g/w/BeOnaJ57Ua+d70Xz/qe9lq83re+Ovgfk\nYbob7NT9BeO0/V8d1xN24P6vjnvZHn/H4jf9Jdz/s/4yxmv7i+CPex6vva69/1fn/6v8vey8\nf9a/6Pk/W2+sWcyuz3vOix+b3WDW8/4jsz/99LzX3n/ZXrsu9y8a/0+t+3f5/DOa+5etX/7p\nOudF8/zVOuafqrP+Kp9/tf/Nvk3Tr4M91vL4P3tOO+5Fz71gHl5P2/8Zn391Hm2/Hv71Z/1X\n0C/3L/s+4G+/l/gPx08FHr00H39XjpecZxryAff8XufP+r/63Mu+z9E+97L8vIh+ET8vyy+P\n6zW+4g933qU+ZGhI8UTK7197nPmgM/Wtn5Zfto76H0d8sHAh9S2GZ5z4gnrPS0uEkfplz1q5\nhlF/aPulJQr1MzrkvP8p9YHDztvFUp1xfeeMfFWpV6R9ejSYN+P8Oeprttvc053qmAdePv61\nic67c2SRvkSb5HzdU6+s/XgB9ZnbC1yvRf0zy98PmtjD/0Kf7DvN8y36cGgyXT9ZIbBfR2Xi\njCojlM3DqG+qL7TQWZk4/bRu2fdfEt2k4nz9FuorfDu5lIn6fFKO6eMW3l13g/pO7SYMOEr9\nVs+d9RtQP2HeyKTq1PtJfUwzRtR0yU59qqiV9xvqp85b9fMU6i92aGB6Rv0h8x8ko/F2l53y\nX6C+Osavu9h9VUPq5ywcd7IT6Xnuotgx9alv8WxX8UvUH/z24d046h2Gdi1YR5m48+fhOavS\n8zvle9GJHSc+2f8d6aljk/YfVwmlXn+1VaCfMrHDJMvfxZrYAXbqEGNwdKtGfechqS7p1A8b\ncsLLgfp9Ug8dfvRsGbqE+k/aX8hBeuzQ0GteAz31Tk9zr/5Fmdh+VscTLepRf0m/pUsS9XNG\nlNhbnPo9F03DR1Gf/MGmmaOp77rgUZ5e1Md5rJnwkPpY71z5JlA/XBw50o36qRem3yc7tvcZ\nPuPWCcqzwyu12VmG+vJDdjQju4wdtfP9yqSXsY+kX42tKNcb665f3If0MnbNUI9yu6gfI+Ud\n+46U8+PTlcr9/Jj6W1LOsWW9G99bTX2h4buvCeobjwhf60i9/SK7Oe9Q32fX0K23qK99UXxz\nmp6D/3y8U/rLR79WLjV0MNGrKhQaT89/bDloTn3u+eRRdP9hxNICjQmXP5z3/m2y91ezpP9/\ntXTHh93JLl/FDrtVpyb18buWf9mW8Hx7xOGna4nONuyjoDlErxuWd3AbomGv9b9+kLgmkujC\nnsMbE3/rL1xpu/QA0e9dne7Sm+h0yef6k5f9cnxC/Uf6B8E5qI8Y3joX+ft6t6GTn02n/AL5\n17eQ/r4edlxvGj7yUQXqzX9wchL1dsNPnbunTDz9qfkPa1H/aIT+II0/PVTG6+kL0h6nV+g8\n0yorE8+A79MnpV+e+UYsvfgr9Z+IrnfPU1+p49OmtM84W0H6+5mVTzb8RHycHhlRVAmkHn58\nurn5D45RX7VS9JYj1DuY/zCbMvHUlF1TvyI7nuq1Y12bltTXQd/C47sxq5SJJ7/d0ewDyq8j\np3VK/K4d9W1lvIyEnCMRLyNHSzuPvEzslKO+v/kPlSkTR1WpsPh98/XPdmQ27k+9/I4ycWQH\ny99PnDhSSNwYeVv666hS0p9G2cj4HGX+w6fbqC+8iCaivgT4OLnz5D3yg5GI85Edse5XMs5H\nzpV6jHTc7nSR8C4yScodmVLhoA/hS1TOIU9tCb+ivKQfRA2p/Kxec2ViF/uKletS3Hap7N3X\nVJquPxxetvxUost4dWh8hfpQJWDJCuqrybjrotcZ1xBOd6lexbNUjyzPO0s/jTq/S2ck/4ta\ntOu902Wph92jEnSf/PSA+sHkoMR/FPQb9WGHvscqUQ/c/mLE9nG7aN4vEizfxyauXKPrdm48\n9b4SH78YuOvY3H3U3x0yrH0Huh4g8W7l55VbdptLfef28bXmUZ80r9Fj8tuVkHNl6tCitVso\nE78sPe/UXvKnL1vvsPuwBPXwp5VLpL5WfrBwweFSNP+Sb7fmDSH6CxkXX5YZ1rzLIKI3gq/v\nIh5lkv5XPsH87+snJgygOE/suKOducdzYyvNT+lm3i99KPFvLPz24527fp1kS/0PMs4/HmFe\nmHqSqkEK9cDbj8tVGND1R8IB5L9JfdpdaUv+Owl5aRLiZ9JemVcmrZB5atKZC7tM06hP3r5g\na0XqQz9w/p78a5J5GNV7k7wIlsgfJwG3JzW/VDj2JvWwy6StQ74IJFyY1Gro4JxXqS8q8XTS\n+x902kR4Nwl+OglxPwlxNwl5dxLwetJJzHe0Yn773crEycjHU2p0KphCeW7yaomPk4Fnk3tV\n6ZbnZxofLfPyJOD8pG/nH+87lHqb7XfnEJ5M8pB6n3hW2mUi4nrCLmIniGiD1OeEzErfzV5K\nfercj9wWUw//nBAv/XY89Dihg9TLhMYy343/Vs4/Hrg0fsvTm+1/oHnXS7ydOFvi/sQLMo9O\nmiZxYWIPaXdKOJa8MxF2n3hqUbNPv6N+s/SPiQckLkxsR2YaQn1PibsT35f+ObG7zO8Tl4/o\nsZzy6IQfL1889jH1Ez4oeJzGTQiQep6w+eLUeavN8sh4mFBL+vmEseV/mTqWevl3KieOz1jg\n7ptXmbhkjvSnJbDTkgcy7y5Bnl/SybNU95HUK9IPl9SU+LF4v9cPlckOi8/KuFkMey+pdrH4\nAZJ3iausV5aUknXO4tSKXz3uQ324xMHF8JvFM5X+04pRf8grX+d8NF5+t524pCKFwQd0/TFo\nneXvME5ckk3612LE9ybg+Sbk/U3I05s+l36+aceI2ttJvk1fDtvn+i3VLwGVp4VQv+mAtMcO\nyLcp8JJbZGui20p/2IT6Y0elHe36Dyca+XSH0/wVQ4sS7S7z9PY7Em83PqNhhG/bgRMbn8i8\nsUMn652NhyO6vkt5aYerjKONn8l6asfqEZ/OIvtsXCHttGP0LipYiIa/7ACObtwncXFHDmmX\njevNf8iS6IFyvk3Ahe0Yt6mIjOPtH4rHu46b1yvfbS/h+Pb2ss7c+JXU1/YWMo/MbHp1hEJ4\nsSNk98DOZMeZg67Wa0d4v/1ipSb7ooiu4T3zNMXvt6h7Z6yb/8H45c+fn/GTrEeT+1R44J6f\naNgtebjMDzM9ZR2SDHyYYfT6quZmZaKxhoy3GbtknZZsdlsboidJfSUjnmZWHXo4lfhL3i7r\nhBnAreSD0v+n55JyJ6P+mY48YET9MG3yQqc7lDeMVWUeSDou89i0xbIuTUqS8093WdjvAuX9\nJFfJ/zTYMWnzMPvee4lOM/9BUqIDvW4XoXhdBX0kIY+sSll46WsXohEvq7MP76vrrky8Bly6\nZpS4tgr177Ugydcq5NtrZYc3KNGM8ssgWVddvSH1+eW9q9l79SO6rax/v+y2K2z/GMLHbE/b\nTiHcXHnl0tfOswl37iEfBct6YdIZydfKvu1/yB9vxvH2DmKIOX9K/Jj0a0fD/JKU36CHFVhv\ncgG5z/gC/j7pmcyDK36RfE2GnlfslPumSXukXVcsvjJmBvn7ZNSrK+ZW7FhyBt1fK/H7C9hp\nxUrlfo9wc/6Rcb5iDPLVWolPytDyy9ZuINryB+GJLiLrvUmod8TPl6LCvzfzJeNO8abtFeXV\nyXrpR8qCYXEtjeb8I/Om8on0a+ZDKQ+cRryJa1L+SZ11xR5uovttgOeYX2R+8O5PE+l+XY/R\nc6hOE8CtidekvGKBrBtixsn9m7jbPl9AEaK3m/+QOM2Xu2OL4deJvintIPaKYkVyEg08F+Ok\nPWIQd+KB1HtsHomzYpisD2K2SDzwhD1i88nnRKFn06vSvLGowwT2m7EjpF4E6s7YyvQY2SkW\n9o3NP7RmVcLdGNQFMRHyfgxwIqbJldmTib8YL7lfiikn69+YQtJvYxDP0fCb6O+lPjfB/zfu\nl3XExqfSnhszO6ze5kU98vlG+P/GuTLvbURdsxH7yo3Y525E/bPx0x15PltJ8zeV+5+NTaU/\nbWwo43xjUIVqo6ge2DBc1rUbWldOcyDc+wr5cz34+Gq+rL/Xr5B5af3Zi8un07rrd0k55wyU\n+WsO6oM5yGOzjRd/HehK/YmOX0TuoX65jPfZ2GfNni7z+uwEub+YdUXqczbie3bv4avSyF6z\n8T5jtqPSeW576rHebOD0bNQ5s+9XujGhMPU3ZV6bjTw2u8fQR+fo+VlPn5UOsqP+kMxrs1G/\nzdsh/XbuV3K/NTf7gqRC5NdzsK+dg3podh/PXn4Ub7MeLphc9zLRhaT+ZsGOsxLE4OtTqEc8\nzLwn5ZqpSH+cifclM6GfmZESR2csl/g045MrN+OI7xkTJX8zWg75rCXh1wzk4RnAiRmNyh9d\nRP43PUPKNyP3EyrwiO+pHfZsuE/9Wuk3c4Cjc4CHcw7I9zJzwO8c4OecRJm/54TI9ecUvBi2\ngeJ29lFZF86+KP2b7TcH8TN727yMHbSfnh0OO3ST9c5s4OysTjKuZs2RfjFruKwvZ3EeRT00\n877cd60X0g7rUcetD5B+vA715zr471rUx2tRT64FHqzFvmdte4l7a/vLunNtHVkXr8X+YA38\nYk2mtMeaJzKPru3X4fQqssvacws+r071/9oJsk5bW1DWe2tt5Xprhsv6f802uR9bg/j/Dv6y\nJ0W+D/uutsTt7/A+6TvsA/aELxjkYO6nt6eCgXqfZ73t8lBfRdZXe5wMHeuQH+02Po0ZS/be\njf34njIy7nZ3kXlxT87d1YdRXbf7rHyvsfvrnenXaT+8G3ix6/4H/t8+MvcyLnYbLuqOUh2x\nG3ixC/ufXfOkvpbhfccy1CvLZkn/WQb+lwmJo0tPea50HEj9pAXBDXdQ//Gw9d65qC8vcWlp\nMblvXVpU7ps+/7Tyzkakt6UFKq1ZlEn0JsnP59HSTz9vId+XfF5DxvES5OXPUVcuwX548fpL\nQe1o3sUVhn7+kOrbxWWk3Is2yHpzUWPp14tmSv9ZtEq+r9yKemZrAVn/bC0u6+qvse/7Gvvo\nr/vLuP66h6xbtux+knA1O/W35bpbvpNxt/mkfN+xJbt8D7YZ+5Mt5j+3TvGx+YlXvCf5z+b6\ncv+9qce3134x19EBHYfFtaJ+vMwjm5DfN2ZEhLxHcbkRuLIR7x82zpf+5If9i9/ohRTB1C/p\n0PoM5S2/YfI9mC/2V76R8jlf5AVftw5lb/pQv+vbzwuTn/iul+9NfKvJ/YCvS4XIvoQvvoPm\n5XyH1vHF+yrfYbJO8YV+feXfg5/oi/2Gb0e5L/cBLvigHvWJlvWIT4Ssr+R19dxnHL7rRC5A\n31H2cUdk31cn+1hc7zpM9n3Q98BzXRTcB929kuwHTpb9gMuyH4T5BmLdwbg+MAjjMjEOz/Xj\n57F+Isb1Bx2D+513yj4C63auZE3HYJ0eGv6j0XfB810wbw/IE4/nEnC/H+73g5z9cD0R8/SH\nXInR6BdYP9+faciZCP4G6yA35k+AXANBD8W4WPAzAOP7HwGfGN+vAa5j3BDcHwy+BoMeFGR9\nfyj3GDcI/A3B+mzHIQ2s7zN/TLM+2H/icL0/1kvA9X7grz/uDyoE/qIxL+4PXICe5VXw/DDZ\nD8C8/UH3r4Tr6Ptj3n5YNxF0IvgcCHkGY94E0Ko9ud+poXWa+TriOp7vB75iMT4S42Mgb/Ra\n0OArBvPHYHx0tOzjwFdfzB+D+btjHOuJ7TQY83AcDUQ/FM8NwrwDwfcgzD8I/AzCfIMwP8cB\n8xGLeTjuWY5o0HGXreXqBb6iQffDPBzHHCfsFwOw7gCs0w/z9wO/8aDZrxJ4XcjN+uD4jMf8\nMehjK1nTCaBjMW9frB+Pnu3AeDEE/DN+sR453obi/oDJGA8+Oa6Zv/58H/MMDoIcuN9Dh/Uh\nF+uf5WJ/i8P68ZAjHutFT7Zepw/mYTxiv+X4S2C+0TOOsT0SG2D9I7KPxXzsZ2yHrni+J55j\n+8fgOuNXfJC1fMwn415vjI+Lln03zDMQ14ewfLjPemG7qHKBX/Zr9r9+mdbjB0Rb89sdPfsZ\n+18snu+D9XqDf44Dvh6rs+ZbxSvME4/7iTw/1h90RDMePccJ+wHrjeO7E+gI3O8MutNla7oz\n5uuE9TuB7tzRelxHng/ydMb4KPSRmDcSz3fDulHcV7Ketwtori94nUhc5zwdietRmD+qo/V6\nUfwc1o1aYP1cF+aP5WM+Klnzr5Wb+e6EnuuhiMvW/Ebg+c4Yx/HE9mZ7DGogexWXMc/gQrgP\nmnGHx3P+4/qG8x3jB+c1zk/cq/luMvjgeYJkr9YTGMd5m+sdVd+QpxvGcRx0Ba3aF+N67ZQ9\n15FdcJ3zUwLmjdFB3iPoWT7wxfVdHMZFo+c6iXE4voHse4KPeKwXjXExhaz5YpxKBB+cz2KD\n0INvRWctJ+uL+Wec74v1emBcd9zvg74X5O6EcRGQqwfuxzKfLBfuc73LeXcwrrP8MeCT45/x\nm+sVFd/RJ+B5zmesvxjFmo+BuD8M14dBLnn5eb03HOPVegvjuT7rC7onnuuOnvGb+UmAHL2w\nDsdrZ8zDfsh4w3ma+eb54sCXWjdgPq6HeT/BdTPnKbV+5edxn/XIdmE/jAVfrC/e16j3QfcC\nnQD+2J5DIA/nLa4jma8h3INfrtO5juC4j+F1h2E93Gd/iMJ1zr+clxiX2T4cnwkYz3UC+w3P\nr9a3R2TPdQXvLxIxH9uT41LNQ5C7NcZF4Horvg95OmC99rjeBn1HXG8HPlrjeiCPR98S91to\nxnXAuu25x/226FtprncDvzG4znblepf1wHUO73O4bmN84X0K78e4bmL/ZD/keOZ8wPs53mcN\nxPy8T+PxvE9Q94Gg48Ef4zbvA+J5PObl/SfbcXCmNR9qPkLP+YvrFvZLxns13pgfzMtxFIPn\n48AX15lcV8WBHzXOwS/nP/a7ONCxGMd1MsvBcjIeMG7yvo7rKM7TrIdhzdAHQV6MH4zxbIdh\nkL8fnv8A6w+dLPtoPD8YNMedqmfQWvtyfub3AFxf8j6P8yXbl/2L45n1wHVrv0rWfQL45npT\n3Y9AfsZB3reyXmIWWPPF8jBead8/cD3O+z5ej9/fDAE9eIG1/CwXxxvHR0+M4/zI749igtBD\nLq6bOd9HYx7GR36+yzA8Bzmj8TzjUizucx7gPM/+xvKo+QHX+2A93n8xfnbD82FbbKqn9v9Z\naXFCfu+I+ly+7+8ofwGv0i7Px06+e5crrVvIn88OAu0XJ88te4eVmhq/rYcSnsP8mrGIEtui\nseV9Y6t2x26t+MWkRD2tW7BF9tJKqwRJtzj5YW1Dfh+KN/leMGKZ+VhAeSWq0IkndzY1URJq\ny3k6zpXrJG5oXe7L3DZKvytF+kyfEKQkTItdW+m7OUrnTxws301iP7pQv8z87Ur0R7M/vxb6\nUImjRXqNa6RE3aLHl2UqPe6vtZxHid8nf+49oX+hTv7Hbiuxsfmbb23voPT5RcoRvVA+l/hQ\n/tx7YpK83/09KXd8E5dWhToFKN37zd/e74cNSnxDeZ4hNjq7WQFK/HdSD1333Zy7vm5BJbZP\ne2LwhhIzmaTpM0PpNSK1/4knd5WQbZLPRIM8zxvfU56/7R3Y8LPhOaspfgFnSpCGFN98NOzB\nYaVTY+oOnVF6fCnl7BpKq5b7UokII61UT1Ui7snfW9Fxj3lYSSU4VeqtxS0pT+tE+XsBeo+X\nemydYmbzA6XTaPMy+ZWwpT9sIMmUjrnlfH15/ofXp3SLXavE/Crt2f1XL5p4nzKohPx5/6g7\nNM3Qx8ogp17jiHMlYr9ct1/pCWbFKHHB0q4x5/uZF1B6Q799G+eseqF+WSXmk+SONKPSJVg+\n18vWzF4Npe5xOW/kSWnfnjnMw/yUVseOmB9Q+jSQfhlTX+orzu6QWWFK35xSv7EF5bjY+SRd\n861K7CM5f9wV83GQ+kp7eyln3HuPzlU5kqzEdZbXY8+bLw9QErfIdRP7UliceKokvm8muymR\nTtKu/atJ/cQfkHrsf5C0VOl7pVMOOX5wiNnNeyuJ75qHt1Da3IJ9rkl7tmsh+ez3g9R74mwp\nb/xCab9B9SR/A7ZI/xjYV14f4CDXHxBDamw4TelUW/pzp5oyfiO2Sf9oNUv6Z/9C8OOOUs7+\ndaW/xieCn1xSjkGH5O91iHaXeus4UPbdFkj5OueScvRbIv0hfI20b0BLafc2U/cuI86U3r3l\n73WI3GxWV5zSrpT0k4giMo5abpP+Fz94unkCpUMngpsqR5V+2Un7ZRYocatlnEZvl/xGj5e/\nryKupPSjhDwyTmK7yHjr1VDqI/qQnC8utzzPHu8nf39E113yHEb8SAsgKPGjZPzGrJD6jkuV\neo0INbtJeyXWWeJC9F0Zn31myO9JCe/Cvwb6E4D9qsTNk3jWZ79ZHZWVtiOkvuNc5f1Yo+Q/\ntqz0u/itUu6YhtLPIiNJzM+vKVF3R5oBTYmcIH9PRpuLLUiwBCX6jlyv2xzJb8ebD8wXlMhZ\nUs6IZdKP2vtJf41YJXGuk07GReRYGUdRJSSfkTHSLh33yXiJvCvt2H+K1OvgcfL5Qaulvbtu\nkbjcv4uZzTAlrrfE40HLpL76ZwK/Dkg/GRQPf4uWcTNojcSbOJPkM/E9qde4JVI/ke9K/+l3\nWvpF1G2Jr4n4fSP9fWWeGDBB5qHE/PK5PsPM7pZTGXBC2qXfQ6mvgSXNbpxb6VJM4lOb3XKe\nTqULmgcorSZJfX4wUPrF4Hty/kFBEq+HFJJ6HNRTxsPgznK++HbSv+N+Aa7VlzicGCrjIfYr\nKUf/hWbxXZRBo+XvXRnsQtbv6K0MDpb6bl1Rrj+we39zglPCe8k8m3DaHP6dlDb4fWdxc+X4\n9sekPruukb+XJUpvXi670g2/zydx4yYC5F1KfF6ZJ2I7SrlDkMdbLiMU6Ldf6f+95Kv/XBk3\niXESR/uPl/lz4Elpl/4bpD8OiJDjBq6S+TDxhMSfAQUlXg0oJXGp/1PpFy3PSL+Jjpf3WzUx\nw0Bdxaei5Duiu8TDXh2ln0d9LOk+1+Xvz4nPBpwfIf264xjpt3HhEj/iFsi80a+ZnDdxlcSt\nGH8pV0I54EeC9LeEqzLOEitL+8RVkfm3fyOp7wGzSdv+x5XErdJvXDKkP/V4JuMroaqk2/rI\neft03GZ+UOlRUMZz6C+S3+iDMl7jtkg99HKR+N+8gsTRbu1lXPS8Jv0j8HPEX01p7w7Hpf1a\nFpF+GrFR+nnkWKnvqD6I301SL52Rp9t0ljgV0FT6U4srEt/Cf5T+1nWY5Ceoq7R/b52Mk26j\npFzd50j/iLwu9dC9jcTPXmNlHurlJOur9qgXmt2WeSxwn1wvbJbEk3btpZwR30jc7zFR1jcx\nGTK+4irDvt9LfOw5QtohLlbiSvdHUh+xw2V+jpoixydOl9fbjAWejJTnY1vOkP6TsMqc3hKV\nlvj9Tm36ST6irki/7ThGrt/rJ4qyxouUDo9l/uhRX8ZzQnngX2k5T4Ii80WH21Lf/WdKPbdv\nJ+OkV1GZXzv+KP1xUAUpZ7svpV8k+kt/8N8p+Ru4RvIbdE/izkBPKUfnMqgHHks/btFH9glj\nZb0bPVniX8fq0t5dj0t+27eS9XnL4dLOHe5Lv+03T/rX0HQSc+GPSo8hEp8/OC7xK6GA1Psw\nT+nHnSZJ3B5eQc7b5iPUz94y77ZuLuNy+FbpH+Gwa8L38vxs5yVSvtickt/IwVL/vU9KfsLa\nST7iEqU+2i6Rcdh3uMSt9pWkX3buJ+O51V2Jt52GSX9obZT6iK8l65rB8dIuMbdl37eZjJvE\no5KfjsmS3/5e0m869ZF2jgiWeT7hkMwXHfBcl9bSboNayXX7lTWHc0elpa/US0xt6YcRdWT9\n1L8a8t0UqYf+LeTzif2lvIldZbz2T5b5oUcH6VcD+kiciJkh+R50ST4f7CDzTVwDiUOD4qQ/\nxQdLHBjSQuJ691iJBwMLSTqukdTPwGnSjtFjpb26H5D1eGKktNfARIlfwcNkHnj/Axn/A4LM\n6VUofTqDP+Bl1DDoMxr18mGpj4RS0q/iGks/ju8k8ah/XkoTt76g+kzatddDiScJq6T88f4y\nPyZESvn6lZL27rdY4khoYdTRqxCH7eXz/ZvK/NHmmcx/Catl3PbPKeUfUBn1Rhe5T+j4TOal\nVqjnI3LIeioot1yvy3YZP5G1ZHxHn5D5seUT6YcDSst1Ov2MOjhO4nifL1HXfiHjNKGutEt0\nG4kHsdNl3o5rKPGpzwg5rndRiZc9Z8q83+kDKW/UUTl/VAOpr8jqEl/a1pRx1LWFxK3OgRK3\ne6yX+Ni1oXy+a6y0S9ctcnz3laSmm/OUyFT4UVGJ253iZX0YapL5NvKkXKdLhT5mRShxk6W9\nQ5dJf+sEfEg8IvUc3U7mp9aTpd9EfybliK4u/axPmozLPtkl3vXSSX9MXCfxMTZK5oW4xlJf\nMd0krnRPknVVQmEZjzH3pP3jIyTdda/Eu34t5O+li50u9dW/nMS7/hckX4lb5Xwdv5X7xpDd\nUh7loBzf7bq0T9QkadcWtWRcxg6R/PSqJfNyTD7ppz1LYX/gJfXVN0r6SVyg1G+v+xI3ujeX\nfvl+tIyThJPSHv1zy/cWCdmwX20j143tIvUZ31vqN3aYjJegwjKuelaT8seGSTvH/yrlaFtb\nxm1UqvTP+APSX6LmSTv2S5dyRDWXdo+dg3oIeSj+rrRzQitJt74l83pCUbluzB2JPzEL4bdh\nUt/xW2Wc9q4m143OI/Xd+6CUKxbvDRImyriILQM7Jcq8Ft1SxmV0E8lvj3UyPuI3y+tdVkk/\n6l5P4lTvLjIue2ySeNJhmdRTzDwZt32vynE9d0q663qp54ii0m87NJP67FkL+K6X/h81Wdat\nPVvJ+xEO0t49v5Dr9Mgj/bTdKGn395vJeOpYXMrRta3UQ4uDcn8fFirzV8QkuW+JzC7jouM+\nyUcUfm9ytyjUsY9lHHfF73vtXUWuG7sP7wPOyvt+eB/lW0/az7eY1Fu7W3JcZ/w+sC7lJJ99\npkj+upWUealnaanfkEQZb50fIx80ln7cLVDifd93JR51k3/gU2m3XOaHNt2lPVoLOS40SO7z\nWtfA+4ni0g9aNpB6bDlY+nMrIeVuoUg9dzgj6yxfO/ilj6wH4/fK9Trtwb6unLzer4/0y4Hl\nZFyFJMv9UzzeDwwYLuWPXiiv914q82v8z6gb18k83C5O1gUt/GR+bt0O9bQO7ydmSv5D5sh9\n6ftL5LiwAIlfYfh9w5FeMj7ef1++f+rSU+or9K4c39Fd5su+PaR+e86WuNC3j8TD2HvAvdXY\nF8+S88dOlPks9pjUd/xPeD/QBHrYKfGQz0fF55Zx232xzGddisj6pfP70u5xQ2SejMPvDe9s\nK+vzrpMl3kci38d0kvIGHZT6auEr5YldJNfp2lOO64u/B9W3rsx3MTWlnoNnSr+KGSj9tPdQ\nmS97j5f27rpe0nFeeO6h1EPQNpkPOuWUdm27RvpRW1/pF32zS9zsPVriax8PKVfHdOTv2bIe\n6WMr5+8yVuaD7u0tOMHnPkXS6Gle9xt9JpJTHC5eqpBbJC/48ECk+06R3KZU2NjZR0TyxaLr\nJnxZXSTbfzavUwtHkTy/5Yayv1wSyQPv1hi1oplIbvUsYdroIsJY7W6Zm30nieTGrSIbv3tf\nGPPuv/1ky1ORdPHL/ZWbLBLJtaZ7zNunE8k9vQ1nDhcTySWnzhpccoVI2mA42nP6M5Fs/un4\nPNTrHvT7bsQgkRTwQ+CksX4i+Qv3tF5lcoikjGY1Nj2tR/wsn965fbxIrnq7xpGaNO+DM+Ex\nvnNF8g+OUSXOFRTJT683Ti3VTiR3Gbl7+o7PRfLMohHnp6aJ5MWjlSZedYXRNWXe1h4HRPJP\nu4Nic7cRyVErlmef1o2eP3W5euNkkXxotN26XDT/4Hcal4xoIozV3bqNO/upMG57f4vBtbdI\n3p/XoUDNXMLoXONxmfy3RXJi3fa5yoUJY63KP53plEskf3kwNPvHx4Qx8vvCJZZ/LZLDV5e7\n2K6USLH8GoSqInliWuqNxntEsl36jlNls4trv1rwX1zzdC8UPOacSE7qsi5551aRvGOp+ecz\nRPKYc0F3C7YWSa72DU/0rCGMjdZvTjxiXrfD+utP+4nkggU3Da4ZLZL9G7WIqXZBGCuUOHm+\nDNnlevX43O/MFEnT8zW/XP6qSC4c2Mx9zQaR/HON5Motu4vkA0/CworXFkluTZ6khxwQSXXW\nv7O+6kqRPOKjHOXmx4mk1Pc7XF8aIZKvfjQurO0AkVItX0jDmV/Rc6sWu535USQ3PH9o0SSa\n9+bFjXXmlhTGfGFt+y8l/kfX9h+3pKAwtkqJNOQuJZIjD8Z/MqCYMIaW39D4uo9I3pRw4djq\nicLom5S90v1bInl51Xz9szUVxsJJ9Yp0Mojks6eCxxV4RyR/syGfvambMNqfXBiR9EAY+2X7\npM3mzSKpxvyMmbdWC+N7aY83ekSK5NWWuBLGcoN+quV8URi96mQ+OrZDGJXMilvq1BHJeyKK\nKgGfC2OgU8KWonphjD8+uGi/n2m8bdSqM7tF8pVHmWXH9KE++ycOD/OK5Oi42YbALuJaeJ0S\nl8Q0kdyt7qDO/qtE8rzah6csri2SvX6dZOs0ThgLJn6S68QVkXwqfNuBB/ScpWwbJJLn/DjE\nK14Qf5WXld5wQSSvPbC4+pXiJO+gmp/5DBPGtlOOBrgdFMbhOw90zJdNGDs1/Sjs4BaRPPSk\nfdjszsI4MfDrQZtthNHt9r3wEUWFsV2jouFNW4vkH/tMbTPlAfm3IbJ9QA/yg5r+v14rTvIv\na3o6h1Ek9072bXZ8tUiuk7NU03udhNGlcYNxX+cUxo1mxdH8o/I9dctG9vpmyKjJ5UuLG1ta\nB+puFhWmYYZSF++WJH/0a7d0SSORvDt90cBU8oN3m7SotnSkSK6U/x39L9Q/+LTSVydo/rWd\nLw+s+Y1InvGNf7OP6gtjnjw15676RRijFjb6aG8B4reP+eC9SN7a9N0vnt0RxjrOveudGiWS\nLb/ugeQjp8vbd68w/vRzg2Zzawqjbsv4xaajwrh3bpz39W+EsUbOn3O2tBXG2sbFTssLCFP1\ncaWXFL8rjB8+XtBo9RhhnLr5dHM9xVfa3qaJE04KU7kNPb980EgYT0+blff0QpH8dcXoi5N6\nC2OZL0PXDvcgPzw1N2/XTuSn+xbPqFRepDYZVrLwp0OEcfPWjCP9QwnPinzQftQtGvdjriOr\nz4rkbc7vFXmkF8mmpGKmG1PIT25WfWfFLpF8egsFPMmXc/mvBeo4C2PHuIsV6qaImxP6hvmu\nWyOMvdM/S15zh/RTP3ZDyEhhit9rPLPdXxidxu9fNrSDSE27USnbyjEiOf2bz9uVcxPGZ7Nb\n2Lpto/WfDfjB+zHp4ejmkq3IPifGb1j9w0lhrH+j74Y95J9pl2LSnpqEMTE5bWX2amT/DUuj\n3ic/OOnbpf6l3cK4BuNMpZb3jiF95540pkzHE8LYYJpDRF7yvwen3D9pSeteWvtzxeFLhbH8\niv2fjF4hjPMGdD2QRjiX5Hnm/cV5hanQshGTu80gf3mYZ8oAV2Hc2aHngk75KC7q9NhdfKsw\nHt7c6bQ76XWGQ/FxI4bR+HOZLTyPipSlsM/TL97L+9lokRxy9ZdrruTfT4Y2HuZOdnUtW7rj\n4xLCePSLERVrTaH4GDvQK3koyZvyw8qfzwvjoTKiSZfrhEvjJ94s+yX5OeIkv1v+xh8tEMZC\n313ctesUybcyIbJBbWGshPx0J/zglBtfUPzZ1zu3cR7p5cHuhucPC+OmMUsOBJIf31nzS/Yb\ng4VxUBWfVYvdRfLSze/eKHtMmMpOd3DzbUB8tUxbtID04FdMqZn0K+k7/qBNv9nC2L5ZxdAR\n7YWxYuyDPhGE85dnzv2x5QhhTMhx5HErwqG5g5Z2H7dRmD7ec6jSx9eEceDSSb4RT4WpUplv\nyyyvQnGbNuXMui0k3/gR718hvbS/W+LbdcuEcVXufF3dA0XylGmfnSnzNclRsMblm7OEKS7j\npyafFRLGAQO/2JXHRxhX3BmZuTVVGNtU2pKzF8nrc9imdlknYcoevTz3D9VFSlLenlN/OipM\nZjfvlUl4Mi1b/nd/ESnFSgW1upAiUgz6gx1mfidSsrmbfx5WmL49Y/75dGFKif/h2Zb1wrSu\nrn3xdd4iJWT64I9Ms4XpqwXK4H2kl1s5uz4qMFeYjMfj1vySQ5jm1Zh7fOtTkZL3Hf+BF0oI\n046pz6ol96Z1fD4XO/OIlGGjKlwsPFOkdDob7jsuU6S41LruEnpJmNaWiqj480cipeaxsruq\nLxWmkz3OKXVLipQuSa7LZn8jTFMkzpvW1TK03F9cmOZHNg/f0JXmX1loayfqL3wz59GCHsL0\n42J95W4NhGlsvd3j3uspro9rkdBy1m1hOp54Zcv1ciKl0rT+g1M7CtOabBNrPTosTLUrdhtU\nlPg3p8db94j/DZXqzrklTJvK7/dcdJz00XJxeHZPYTofdChgVX56rob9w/rBwvTNj+X2R3YW\nptOJVR+P8xOmDTOPVPKMFCkNZgSIp3dFiueHk1aeLShSqgZMvbJ/A8mTcUX4zBSmIyFTfQ48\nIxyyiVh47kNh2na89egPPxWmtuG6/J9R/Hz/bcEiKdSn3k4crlwQSR9/latmal1hCvjQb9Iv\n48TFpGf7B7RxFKbHe7O3WRMqTPqOIUH1Mgj3xid8t5zwYVrnUXYn9wnjhaE/bn50Spjead68\nYt09wri1QZESIx4J0+fTT5ArCtPeTlsvuwlhSrD8XKK46lwoZfSkB8I05oxz8TINyf6u5W3F\nDZLP2fVM5iJhynnom63hZO9WkwN7/9pOGCPMBRrl35T7h56etBc3D7stS/ilvjBF1T5OqVMY\nP4rodKvLZWFcHtb0g1shwhg7qsTAz34QpkbT46v1PED2HNKTSihhCv8y27PulF/T7za6fHYh\n1UcL58xtXUqYRnt3qFQ5t0h5t5je87sIYRp4qd7hSqTf7Dm+mldjHtWNva/Zdqf5xzY416PC\nCPJfy/cqYZzdu+ERl+4ixStk7dJf3xcpLWqdVua1EKZTC92r+bgL44b4QnHFfiS9LaOCgPwi\nxmJYYXrwrHiFBNLrs5jIfbWoDl1grPVZ1Z2qfMab9cZnH038TV8+1WbBeGE6Uznb6L1DRcqT\n9kf63hwsUkb3cPrScwvFpetY8fFIkVL07oqxy6PEze9zzvK/O0yktFVytczfgp4v/eDhgRHi\n5qkhn7UstlWYLuc8cmKmD/l1nglNB+0UplmWn88lvWfuG3I6TpjOdn60ZE4dkTbQDABlhWnL\nKKWX7qwwLVpZ7auSmcJ01CP+509JjuyWnysVpja5JnzySxmRsXhVqWPtLwiT5xNdjKD6cvsc\ns0UIt3OHbDhNdeL9d3P1ypGf6lS7HIXyugijt24nVT7C2GLr+FbdEilvbY+ddj+Y9Px0uo+9\nXpgmbFqYUm4D8T904d6J3wvjd8fqfFSB7P9pjugRzcuKm2dW9tZtaEN2Dzu4eXUrYQoZs3FK\nk2Rh7PmD67QTe1S8MD78aVZicjrpP3iJ0wjKc/2VUhWyET5GeNh8vSlaGEtbAl+kPLu6+NBS\nylNTD6VeGPqTMO7ufchlQ0thnBl3JiNaR3bvXyvnxxQ/DfKYA0TcrLOh5pRSu4WpSIfU+MWK\nMJl/LdaohcLkM76434wO4mZaKad6PRKFaUjzU1u7UBx+ND11mk19ceOR34cz3iH/KFEhsF+H\nM8L4IMfogU+XUH1wy/3G3NPC1H5Sr5vXO4vkGkFuwzcFEN8LwwO/XSWMp8w/5hlFefrO+DBH\nwuXoQU+HVtwljOuWnpzxtLswdjna+mjOG1RPeSbfOE98Fa/vXncV6ffExIMTtl0XpsFPW3Us\n2kUYv/288JzL/YRpYZ4jnVt7k99XM9zYt1+YCs9YvaXgEcK3/t8cH9aY8kSKd3ypU8J4p9CM\nE4nbSH7d/E4NEoVxzLRyjtN7CeM3mef7TaB89G2fsQ9L1BAm23MV5tfoL0z57mxfUZ7yU8fe\nU4cHLxHG8fUS8x0pRfnp+rCFg94RpgL597S9MkKY7POUyx3fkPK45cUC2al+cPXOXqRPu0vv\nze0kTEWHVDQGhgvT3LL13l8zX5gefbt3/vgqwkSbrr5XTcKUNGDKtnCqs9Jz+SSWm054t9L8\n+1tI35afJxQpzczbsooiJfe3Kxq2JvlmzCZkIT++kVzt4+qjSS592jc/lqf6ymIYYbw2s874\nIMonnYMv3kzWCdMC/yL6sVSv3bT8Hi3C90rFYof8JEyZWw7v2BsmUgt8kX91ZB2R0rdr7Y8a\n5RIpQ6ZUa3F0nkjZ8UMvKp1Eqoex2Jy+ThSHtQsuHBlH8frwWHKx3SJl0d7uOYbQPiuu16Xq\nPT8XKWtr1SzZz1Ok/mouYH8VKfsmzu8x9Y5IGVWt5up46rFPTRn9fvSGeQaRUtt15cH+34nk\nvWMiVkfvEklnP3B/oA8TN66N8dv4jbMwNQyJqrEoB9Uh/iXsmtURxs5PTrYu1lwkrXIfULfI\nRyK5QsG4js2vUxys8Wwy/kthmi42f36X4inJ/8PYwBXUB3/dwInqVexLTJ+5He3axUsYz9u8\n79lhszAtm0AGvEp+Su4YSfm6I1XZeSlfJHwSGuaaLoyfLHMqXJD8p5brA7/jtN8qKfd1xvZ5\nHGxNhDOtDpp/fleYqhQpWHFIvDAuajIoOfRLYTwzfNBniz4VaWM+yLuoTCzlj7i693Icpfqo\nz8McHajeftfF/HPJwphs3tD8TH5x1Pz7NoTxB3s/JyPF81T4yydKfGQ48dFy1q2Pej8kP/fL\n8LpQRpgSZ4TEbDtPchVYuML2U5FSq+n4MeMWCFPVpcsTfu4rTB/cdMndgeoak495w0n+ZDlX\nQvOXyMw54WthMrtHdto/tDn2uEAi4e7Qy2vXdDjxPL4XbxwcUN9Z3Nx5bM+YY9dFir51rq9C\nKN+kmV9UeAhTj0qzvnA9RnXKt+2+0yUIU+yAWRWPtqT6231I+yPR4qb5t5vElRbGxdFNJ28h\nPvo4FVeyVaN6a/NgwxraLx5u8u6RHbRvuPfVlYaDW4r0DsWXfHmH8l6Dh3sDz+Wl/WQzUgTV\n39mGf7qzBNk/uXn9u1spD174ymXIEYq7d7ptrz+olEjvsmJEo1SqL9ada9T+xCK1fjA92/qj\n98dFSH97v6zchuq90MP3/R5S/E+YuL/Ns+zC9OkNl3oVSM/79nneCCG9b9hYNHYx5aWV2w+s\nHEv5mfGw6rqqR2ZeEcYPziohJ7sSPngGZNYsJ9I6JHsnt7woTF/nJSAdS3j2OSVU2h/eqnYh\nT2vaD3yfeCY8xo/22Um/TP8mTiQ/KqG70ziXMEV++nPBreRnzXabor/VixuOw1rXjaP47DXi\ncum1K0VK7PAnsxdSvfjZKf2Zu8eFsVlM+QETxpFfyvc0xvOocywwmiCMl6C32JSdzVpTPjrW\nP1f/WU2EMcNw+9GHijBSFZBr8yhh3J82y6PuR8Jk/jU9m6nOf9LV/CZEpHxcJbRwRarLXMqK\nSsuESIk5eiJurJtImfZeEpWU4uacIcm569wTKQWOJrsOPy9SdE92RbSnPFvrVs/Ce6me6RSY\nfmQerX/wp2UFKi4Wpl2ybjDurzHFczjFzffTA6K2U96P+6hK/yOUh8zmzUP7odtPtjy5elMY\nu61w/H5iukipl1S69JcDREqjVmOzH60kUlxlvKSdaN1hn3GDSDlYYdqeXxuJlIaVCik7ksTN\nazdrenVdIVIKhW+Z6VKF6t5O92bMvSVSJsyfHDp/q7iGeuaayfJ9RFyVf3deXLN81sgrrsm/\nHy/kMYbW4prlc0JdkYT3CUnfWd4/iiTLLEPEFctr3JLimuUzbX31+SR5LlVcs7yOrC2uHLC8\nFxbXRlveK4prlteCduLKHcv7Q3HV8hnSSVy1hGMP9brluMPgG+JqquW9pbhiea3dTFx+Yvn+\nLK5aXr93EVdvWV64i6uW1+2FxFXL61a35/P8YnmfLK5abncSV/0t31fE1aGW77fP71vELag+\nf83ymjO7uGohI8UV+b1LXJWMPO+hx6vtLeehxDXLa/z2IslyfGaAqverDjIPMp/Gupb3pLS/\ntNwWyRYxm6h8sf6SLNOHiKRYy3k5Yfkc/uSuSLa8Lu8rkiyvs6m+yml5X6s+nwx9JZ2wvN+n\n/b7lO69Irm/5LiCSOlne54oki/r9ntsb9rtqmaajSCpk+U4grlWxGEqd75rls05ucS3e8n5Y\nXLMc02klkiyfXYLU8er13Jb35apejS0k/ibZWL6vqHpiOa9tsnwnEknyfba4ZlnO5jk/rB/I\ncQ3v364Nlu8xk+5ZvhsI+Xnyg+d88Hyg1XWZD/h/0mzLdyFxrYjFIZ6vC/9lv+V1k+CXxkmW\nQFD1fdVyLMTluT6xPl/n+LtqeT2eX/VTjis1TqG3JPm94rmeWU/y3MXzeGR9cTxawj6nGr/q\nfOwHfB3yJn9s+S76XB74J/tjsuXx0s/9UZ7DE8ZyFsdX7Z0sv4epelP95ZLFgZ7zZzGnQf65\nssWnRLKT5XuMSHKxfMdR7a3a3fJrug8+1wfsx/7D8cl6SgYe8Lq8nqrHhhbFqX5zrYzFQOr8\nya0s5+dU+6n+zHwzbsKvVLk5rizqr/a8h1+ynMnAO6PFnYoJY1VLYItkC1z1pvpK4ovR4i4e\nqr6Tga9G4ArbhZ9n+zJO8rosF+N2sgWOElQ/VOOF/QL6YfswLnI+UXEKvfFDCxA+1xfHNfsB\n4wP895oFflsIy7HpQ2fUOL4K/7sKedR4tNyurOYHxr8LUyzfGVV7XIadmF8Vh4HzbFeWS+WH\n+eS85Wsx5HM+oDeeR8Uh8K/iTKjFYZ/jNfyLcV/Nr8gXrO+rsLPKB+KX7a3mY5aP8yjLyT1f\nhz3UeRnPGY+ATyoeAXeS5Xdh1c6M20bokXEvyctynkCNZ9VvWH8cb5bwf/e5vrguQbypPfsB\n8gzHM+OHipfMN57j/MpyqHyCPxUvOT8wjiAPcvyp+QF+yLjDOML5gf1axVHWA+MOxzfjJOoI\nFbeQV1S9MB/wayPqFTWesI4qF+c3xjWuwzgep1rOOTy/z/HKuAa/VPEcuMJ5TcU9ngf1DecX\n9kvVTuCT7S2PexR57teo29R6BfLxOmxn1peKH5wHOM8z3rI9ocff1C3gl/GN6zj266uow5It\nabOsyq8Rca3Wa4xDXLcBjzmemL8rmDfJop4az/M8cEDtWX/wZ9WfOB/B764A/zm/qbiL57nu\nVO+jjlbzJ/zDiOvqfdid8Yzx6OpaSyGh4ivblfOOWh8x/kBOthPrme2bbBleXiRbHo9R/U/d\nFwDPVTxF/ZO02HIeV41z9h/VDxHfKh/Iq+xPWj5VPXM+5Hof9r7C+Ro4r/ID+3E8qfqH36n+\nyrjAdmcc4riA3zDeXOG8w/kG49R41vgL86vql+tL4LFa93FdxXmB60fEAdNXEF+qHPJc83M9\nsZ65TuT5NHUE51Peb7B+OK+xf6l1FeM92+cFdmV/Ve2M/Mjrs1+xfRi3rnCdCnxj/aj5FfHF\ndYOab9hOiHO1HmD84LjmOpNxG37K/Kv5EPW4ui7XXdCj+hznC+CHuv/ifAe7qvtJxlXmH3zy\nvkzdl8BuvA9W7Qd8VOVk/EaeVvdBjPNcdzPOwq5q3QscYr0zHjH/6v4a/n+VcYZ7bV3H+mE8\n5/048wm/UeUE3+o+nPfl/Jxm38HrXQa+MT6oz2viRa37EB9XNXlB3WfzfgBycJ5T6wjkLbab\nWv9wHQz5+L6qR+TTKxazeT+vi7lO4fcLwAeeT+UX8qr7UH7vgfc3qn1YLoy7wvmZr7M9Gbfg\nX6p/MI5zXuZ9AvKJ6q9cTzFeMQ5w3mP9cb5lOXhfwnEKHFDnw/5B9V/Gcc17BbXOYprrMN7v\n83sNrifZH3g/ruFHW78ny5/PEslsL7YH+yv2UVw3qHU65wvE1RWuR7CfVuOW6yuu5xgfGEcY\nh5gvximucxmfGJf4/Q/HP9eFMy3nP1V5L+N5jguOH5aD39ep/KP+uIL3COp7OuRbNd/ATmr9\nw/mc7cJ24nNNFrX7qO+9VNzk51g+rhu5PmH5QfO+nPODGm/cs9/zfX5vqNlHcTypdsG+RfVX\njgfGL9hNtSf0odblXMfxfMh/nPc5j17i95McX/x+k+Oc339AP6ocrHeuP9nPmR/ez0KPrCeV\nP9RZHKdsXzXO2P9gH1VuzuMyL6rnPq9OT6q552qqSPlpescjp+8J08h81T9evlQYm9k9WaT4\ni5S5G3ds60f5d3ZYfsezUcI0ZH4zrx+vC+Pparl/6lhZGD13/WLj+KVIzejVxju1sUg29pw0\n56CnSO0dHLH+1D2RVP7syuNbaP/dw7benfA7wjilYo2cxUuJ5NJJg79LpPqzU68cq7KtEMZO\n+UfUG03+szF+TNun2cSVL2a17BRTXpjWRH1Usqsikt43JVVc/JVIWRCVEdCF6o/wxIDOLbOJ\n1OJVzgXmKSpSnK8dm3dnu0h1zN/q1rlqwjjoK9Gu2WFhisjbfW2eUsI0eX29LpW8RVrA05Z9\nZ9mLFP+jQb/2mSWMiWe/PXAhv0hxO3B0YbHvREr4jaL1mkUJ44Wa1e60jBap17c+iYlNExlb\nP6m0NX2rSHFf3zO10gCR5p2jyMcd8wnjvjz9ek8rKlJ/aRX+5MZoYfqmkrIu9nORXtx/oP/s\ncGGsf2xUFaWWuFPY3uZJRoAw2e4P/KbbuyJ5Rtt6+9I/FJd9P7VfEDhcnA2stu2Hs4pI2Xr3\n6vWkYiKl8MerJ6wfKkwFq4U3H79BXAn+tUHzBTqRNsTOY1OV5rTu9c6Loimubk4Si76l/UGe\nJ20+MxYSqfvGh7a9vl+kXBukz7+c6tNrV2bZraB4fJrtWPa9i0RK/Khz18ecEymNVy4tO7aQ\nuNJi5rKcATnElZJ33i1qQ/uUxyOqbXJeK5L87ny8LXWTSFkftOjJ4nhx64H/L48uHREpjdwP\nbvqE6u1L380d1u2GSMksud9Iekvte6pGZPoyYco5aEB81zMi7Xxa98fzA4Ux7uF1/65nRdqu\n6C+uP+ogTKa2E9L6TBRp8x1vfTe8hDB9fmhPx4HrRerEgYOGtbojUibuXtMxO/nZs26mloml\nRZptZP+rfnVFetcJfrO7nxFXDDaODeLqirRs3+y/Xt5BmHY+6nR0/wmRujPnL/d2hYi0XpOO\nRC3pIdJ6Rn9ZeG1ekVJlxbVabd1F2ur7ocEt3UR6xOX3kj60F6nb13iO3WsrUtZ8awgt7yhS\nVgZ49HunpzAunzlxa8Nt4lzBb72vtt8tjCMdOs617S9M/ZtcGnLHTiSfar2pnHMRkTp0cJFf\nto8UKUM/2eve86gwnjo87LtfjwhTzLOF286ME2m6vNnb140TpoOdlXPX7oq0uU1W51/aQqTd\nCAjN3fO2SJ+/ze5xWKRIzxO3YOi1hsKYuqPjmLQ8Iv18tveVEbEiLdToHrCruEi7NTfQK2Gv\nSGm64emP8zxEqs2+6I8KJ4m0gZ+LedlaCtOemX77vlskjHPz5YxzdRLJCe9smHm1mkhr2rh6\nvXcjRMbMsnnnfdFamPSdS/5yl/T6tM+q3M6blTy9LpbxKn1MZDbu5Na8U3OR/NlU/+un9omU\nShPLdz7cSyQHZDNM9aTrYt7dY7XbidSiV/yuNH0sTD+O37Du1G1h6tD/fjHvPiI1qmqubxc3\nE+mlo3ab3B6KtNuR876u8pUwPbw4fNK1siItz9nPdg4sL1JLzmkavdZLpO3N8WDPpoPiet6L\neTZF5hepnlFP3l81QWRkfPxp9lqjReqthAPGWydEWu7W7sX0MeLG9/fcU1vvEunfzpiwq2u0\nSL+fw7VF4DZxfe6MX9Z+8Ym48enpzIYbS4jrjVp2mr6c7HTnk+yjdsWK1M3jLw1x7E5+OOv7\n2e+Qn9788occfbqLe/VbFkqY10NkLKlYM8LjqDAN7py4JfMRjeuQd8zTIiJFv69R6k/LRcqP\n5WbnO0l+vfvdBjuWx4mUUfdXC8+2IrV1oWGry5UT6bo9SoMtyUrhHMfm1mo1SaQrpifNBlYS\npgNzPq9c94zIrLlkese574k0UevypIth4oFNaEQe2wEi5Xxqw13vNBY3srct+9k35P/D5txP\ndCV/8jxX9c5T8qeYr7NVuZBLpJX1uzu487si5XTGT5/oe4v06EmlTYYcItUh+7n097eJlAHf\nf1M/85jIGNp8crcuBpGyr8/in04HiNROGYcrddwu0ip0Kj3zQjHCx9Llvr0yWKR8XjvyyPf9\nRer3E+L7OfuIjFrnffbVCCO8cf/gYsmD4karS5t7NHlPZMz+pMI1uzoi41CVZRlhc0TKlzmH\nXT3XS1wvdadUt8ExIiPf4qQfdTvFjfeT3FZOayfutL38y573k8T1Z1+Fd+5dVBjf9Spw98NQ\ncf1RysSMe+VFmq9Db8d7O8X1KgNLX58wW5iiT5U5EhAkUkWTjw8dzyGuFy783tnDFURKv3CP\nSKdp5Oc3Mm5HLhGp8flmL/yho0j92N1uckZ1kXKgROSagCci9div18uVLCVSdXU87/QwiZQh\nD9L7V/cl3PeoOqPyLJExr0m74pSHU/WHLjkeuirSh+VJGDt/kjDN97lYep29uDHJt+PHprUi\nzS+s0tHCp0TagrIeZ36aLtJKF0qeeLmZSLsfU+O87qFIPZg+rPZSX3G955z2Y9x+FOmdjizv\neiivyKhW9FT787dEZvveU5d1SxPpQ77uudH5jLjx+cGYBp/toLjd/qUxYq9I9ZjxaOKRxSLt\n0aIp3SNSREa0+67Jw9YLk2dmhcig6yL1yO5DGz7vKjKrJ8ZcSL0v0vtX2L1/WDuRERHq9usE\niiNT/LMNbQ+KtFmlTHc+SxA3yjVzi/koSdzNv2XY3YUfihuLhtzOs6E24UknZYBNXXFr/6rz\ni5NaiFszGxfWj5whbs0Zv8R4/I7ITG5ftHDxWeJWePs7HnHfiMzvWkyb5+Utbsc5jbFb/pHI\nPLCpWb32BcStXsVajAwpLm4FF9zzk3gkMqfq/K+eoHlX7/cYZ7NXZKZeMUZ+XFHcOmD/8Nyz\nL8Xt27VK9H03v7g9/0bOepfni9t1D3aN3t9KZO4as7Dt2p7itn740DXlksStat9Nzjaspbi9\nsmiR/M8qiMy4lgcnN5xAfPiumjlhicicZhc7uf9NkZlWoU6LWVXELZe8HlO7bRO38sR+eKfe\nYJHZYdiHm76cqWQztpo1J5uDuFXB8POd80/FrfRmY7v13igyt29KSSr/nbhx/ny8m30+kflD\nq8jd9xqKzE97blXuVhGZR21HZpqCSB8/94rMvVjccvCfsGn/dpG5o+i0+HzHRealZzd/LTpc\n3Kpdc/6W0v1E5kElZ8yjGeJ2iXGZXX2+Erfdu/h2/7a6uHUv6MNH9SeKWzXKbCvjd1/cKr59\n5+Lvx4vrs7aNm9D0C5F5dd2i7vdWiZsnjtVu/GS4yEhpeP+TGD9xfeaHpe4m/ySurthr886Z\nOeLmxHRTxc/f2bFu3ZELKfa07ugnE3ZlyyVuFCivtHlsEGk51w89tKSbyDBcyZkteri43rZT\npcX7PxM3QoqeuK3zFRlr33H74MFSkbnUe15v/S8i85e1+ppndojM9xYuOZZ3qzh6Ub+w8QSy\na4ubHi2/XCUyr32bsuNYBXHrvREPbY/5ixs1DZd/Tiohbu7aVCVuemmRnmvYoVZzvhfXP103\nvPCV7kqx/ptv3RteTWTqzqfPbFNGpO8YfXBRzG6R8f7AsgG3KT+1OOXRKoe7uNn2e8elNaqK\nzNjAnMfrDxY3v3rn04/H1RDXF3c5sd0zRaQ18vaY9ZleZIacHR8xe7S4devZlox1H4hMZ9d2\nLu/9KG7NW1p9wk8zRGrq/ZGjfv1UpP/glP99xzHkvxH5s+1yFBllax76MJutuN3IMLDbNRdx\ne0j2KicPThG3at6LG+8dJzI+dfKrtvC8uFFwaIWZI8nOlW311+pWFbeGzvxx3OEh4tYnfVxT\npmWKDIfJ1+4tiGb5xPWvfGZXn7REZOR+eq3G+vniVh3T3eiijcXdFh13lOthJ24/Oy4urs4U\nmVXX1r+y7jDFVcB72Vp4K0U3HB+5Ie9UcXvC9tbzyzmJjJyBF4NGnVGKO22tvli5K26JkuNW\nXyK973l0tpsP6WXs8c2/7vOg+btlpKz/Rtxq4LruK//m4lHxwR84p5O/nIq7dH63vcict/rk\nqsaFxa1SNba2vJ0ibpT9ccagsR+Km4ccF703/FtFX7Xa4zFFM8VNZUJQw0vrRUr+3ePSirYU\nKV8rDVbbe4vUAvWWbLlblerUqfN+PDpNpEUnPr4yWoi0Y5/cqzjoE5EyuujXw7aVoPp87mRj\nm2Uis9tnI2fd/pHktz/i0Hm+yLj247DDXYaK9AcDt/504JhSPHreiZafVCO7N+9a4XA2cXPx\nu9WavveJSHfcODuvsZyKF9evbv7y0e3i4kb+E7Puzasl0mM9/dbHvCPSsw/bdK11hkj9avEn\n/ffMFXfbfdPmRuplytvxjSra1RYZp6s+CkraJzIKL6k4YGElkb5/wsB1rs7ixr0BSQP6hSsF\nCrTeGF3mrrgR0WtY5fhL4pb/eP9zax+LmwMPL7+X0UEpuWZe06IdJ4tMzx6+p9wjRWabHoe7\n57it5POuWWf60yXiRnw++5H324nrZ255NLj/RNyYlrvC4xZ9xc3LlUN8+lwVyR1zrf7smxHk\nN+1/WZG8Tlz3bDfb7rqHSPMqmMfm0Aci3b9qnRp7+oqMMQsGjV71kUivWGBb4FcJVE/V+KDO\nt63Ejb5Ra/N33S2uN5h7+hs/ikOP5bc6zBglMnZeaDYp6KTInNXPf4P/RfL7SXXbFaV4azfR\nsWTJe4Sfs1ZOjLIVN1YcztbA5xdxfW+v858VdBHp+wJ7rKw9TqRvSv18+o5UkbHl046ja/0k\nMnacqJBS/1dxM9usiY3v3BI3vMbUPTCsJ9Udn4fbVd4n0o/uzUgqvUtc7+30aKJxgLjR5OG9\nb1frxc08o1u2nFNBZMwo0rPZAorrS2venWqoLm50nDJ1YYuu4kaX+x/PHfytyJzsU7vP8p3i\n1khPF7cyisi8v/fehTqPxS2fUwEznl0R1+edPvLJcWdxq3rfJQH7yK+FaXXL9YTjLYs+DQs+\nJm6t9C55evYpkTlqZcKkqq7iVpfePxsndSS5qg7JXaegyFj83s5l9XOL6wNDzwVsJv99GLhg\n8aRJInPGhB/rrr8grm+KDpjTIYrwvfWBksvp+Z5Nep95t6e4O6bGwbFBMeL27rmNI9vcE7dT\nb9cc2GqGuLNkvFvPpmniXvEB9y8/qUZxOGr5Tp+t4o4+onfXK4XEnRD3qde/fl/cPrinz6oC\nl8Wd/mUnzLvYVjzo3r2DPvs9cWfr7ttzen8vbv/aNDOiHuF7wON0P+NnFO9Luufr8Km4nTv7\nhorOtA+2qfTRD1OXiKR8MYF57ForeWfGRJ50zitutujgurg2xd8PEV38IuuJ9MIzHfN0myOu\nNdo74e6ObSLZccfpwLtPRXp88PHEI44ic3jNAwmHLyoltn/R53aDbUqJHU2K6o+NFDd92s0x\n72cyB937queSLuJ6+LMlc3dSXK5sYbs1qKm4eeF6/pBOE8TN1AsDwy8OJFz/su2KedtFemZy\n1RKrq4kbxyNXBC65KFKXTuk2sqCjSLvXpEpY4E5xc3dapL7IOHFjzdzokSUriwx3x7jln7YU\n15v9PHNj//WU0btUaZvYWWSsCw/VlaB6Xrew8Cfz64nUS/OfPfl5hLg+fEj9QbNqicxPKmfu\nsiktMu42N6zo9aFIv5s247M7C0RmfONpM67T/urkNzs/H59DZM6ummNZzXdFZv3TMbt9bcXN\nxqndVlyhvG/YfrdR+iBxY9uwAbXqJdD+wuZs13aUJ8cPDF59mPJo1U11doZNERl3vj7T/0Re\nkTmmcrliua6JtLQ9X12aSuO9B4+r/fGd5/G9sOMG5cYcpWjvw667B+cWt6aP7n2p3zBxq00F\nj6nnSD8FBlbZFTVC3Fo768niHtlFZpU9Yz+eSrhao6Guy+M8SoH0/SW9R0SLDK+fK/aaUlmk\newdVeyfutEgf4PXl4JNUt5bYf7nKUDuRmu+9Lv1uPhK/9p37bHjRpSKtks3eLTMKibTehT5e\nnbFGpPq2Dy1mPl+6o0Cpcpe+Fdfbda6d2bUT5eW1xR3q1RW/Tgz5pNGjxyJzb9nu9n5CrR9u\nTbXJLO9E+Slh/rCzPzcQN1d83uHnqq1F+unODx4FUhwOqjv5h9wuIuO2g0/MLsLlz2J3jD69\nUGRucj5x/EQFkZa/UolbV+qSPjecG1spRqRPW5BR+P5EkbE9dfJ3NfeLh1t2HzCV/E5knj56\nVHf9kbguti6pvbaYuL7tcfl+l3Qiw3h768QtD4VphXKi/LoUkVrmavzkZ43Fzadfn16Q4zNx\nM+Yn91GuOiXn/CKbDw/KLTKLTtDr7lPe/dE5R906VF8NGZNzlnGUSJuYfHJXLzdxM33ZNIca\ngeJ6i9UdxpzMJzKcViwcGHdNXI+sW63QN+QvrTY/bLmC9nfVu+w4/M5ZqgfWFGn4cJ5IexyX\n8cuVD0XGr4vWXqoUJ2727lj+YI+9tE/oN2pUg8riTl4nuxaESzerPO5b7ZtK4vb+wJk3L08X\nd+p969+s1i6l8Ixsm/1P1ha3tpy1s3M8Km5Nm9TolxadxY2T9zroltUUN+806B618Fdx/Z1p\n3nqPJiLzRkzAil3rRMbD9Lb1D1Fd92h2/PQG10R6m3VOq0dtpPw1Y878Cx8QXr1z+IOG7UR6\njZ879W1SXNwufONdn5uLxW0/ZVuXRHdx28ZvaNmUaPG4ld2UH0YOEncOrK+6rGKUuN0so+3+\nSzFKiXXFJi05QP64Y/qUjsm9xG1deImIkwfEnRJ710U//Eicbj028vyoj8SlS78YDU23iJ8f\n1Wm113anOD1vePmDVP+da257/mG7ceJ88hdVS87oJC7uP3JwqGgmrnbvVNj+3FRxbWX9ihHJ\nseLKp0cKf0T4fej9mDExa/OIC+8tbGEKW6w+f7nV6sfDi4WIyw47rp5c3Vf8dODu/p8OvSfO\nL9jTyxhSTpy5827GjhnNxeHOPR7VDt4uTu45k3PjgqriiOPxexWu3VOv/7hr5oXEMivEqYn3\n03yPTxLfjSm7uHxevdjxg3GWcmiXON5qysWvF68Vp459n+C94idx/OK3NwwuV8Xx2Ysm2k2c\nps5zOGXY+Rbr3cTJYR7fnY28IY5Nmtd9yrI64kTlpGoLTl1X7/8c6xtkvBqhPn+h7wq79/vW\nFyfSZ3YLj9sh9k6reGXvoGfilK9D3ycOZdWe9Xi8+LgtHqEFxJnVxtSOjnfENTGibff+O1S9\nH92XY1noOWeVz7QC+27e2WneXwaVP+fyrjAe+qisae87Kl+svytb3s1z8/YlcbXxmTYba70j\nktt7FG15sbUwfXRwVFUfB5FUsllT91XNRdJPPftM7x2sPp+cmZzu+OCBuHbHbkXQ3Noi5VzG\npKmNConkEccO1Sk9QFx5mrLB7Wx9keTWvWmXwmdVe7P9TpdY6Lqn6Dpxed6KpH39bMSZHlt8\nkq7lUOc769R3WLeE4+J8yepbB62OEhdHxRob/LRRXB1/7+TolYo6nq9fHrRs7ti4xqpe0w7b\ntLr9Q1dxpXbxiD5HZqt6YjkviuqfeDQrLq7kSp9Yd2GSODdh/4m6cVVVflT9QI4Lj9IXdfE5\nL863uZ5t3I91RdLII0kJvYW4vGtjqs2kriofPB/TvC7zwf5/9cHdaU51tovTV0dPNhze+VwP\n8F/2W143aXnJbVdcKa6vFEiOHFJD1ffP9TLGpyaaVH3y+up1xN+pXMPOL7r43E85rti/WG9X\nq7SZrWsbruqZ9XQ56cc9poSRz+OR9QV7njsWHRnpcl6NX56P9cfXWV5TqQsNYi4dU+Vh/2R/\nNB3fGuczZ4zqjykVjHl/CSorUnemXPl52ibV3qbV7s49DtiqemN/uTQr/PjOwQdV/i69oyQu\n8a0sLoXtLtZ5Vy+RvKxf2YCwQuJKQPOW7sNTVXtzf+1w7aCIwdNVfbD92H84PllPqfqMYu3O\n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\nAgA=","type":"binary"}]
