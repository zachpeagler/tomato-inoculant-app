summary(model_h <- lmer(
Height ~ Treatment + (1 | Date),
data = h_data))
ggplot(data=DS_data, aes(x=Treatment, y=AG_Length, color=Treatment))+
geom_violin()+
geom_boxplot(width=0.2)+
geom_jitter()+
labs(
title="Aboveground Length by Treatment"
)
ggplot(data=DS_data, aes(x=Treatment, y=AG_Mass, color=Treatment))+
geom_violin()+
geom_boxplot(width=0.2)+
geom_jitter()+
labs(
title="Aboveground Mass by Treatment"
)
ggplot(data=DS_data, aes(x=Treatment, y=BG_Length, color=Treatment))+
geom_violin()+
geom_boxplot(width=0.2)+
geom_jitter()+
labs(
title="Belowground Length by Treatment"
)
ggplot(data=DS_data, aes(x=Treatment, y=BG_Mass, color=Treatment))+
geom_violin()+
geom_boxplot(width=0.2)+
geom_jitter()+
labs(
title="Belowground Mass by Treatment"
)
ggplot(data=DS_data, aes(x=Treatment, y=RS_Length, color=Treatment))+
geom_violin()+
geom_boxplot(width=0.2)+
geom_jitter()+
labs(
title="Root:Shoot Length by Treatment"
)
ggplot(data=DS_data, aes(x=Treatment, y=RS_Mass, color=Treatment))+
geom_violin()+
geom_boxplot(width=0.2)+
geom_jitter()+
labs(
title="Root:Shoot Mass by Treatment"
)
summary(model_RSL <- (lmer(
RS_Length ~ Treatment + (1|Row),
data = DS_data)))
summary(model_RSM <- (lmer(
RS_Mass ~ Treatment + (1|Row),
data = DS_data)))
require(tidyverse); require(lmerTest); require(showtext); require(MASS); require(scico); require(pwr); require(devtools); require(multcomp); require(rstatix); require(car); require(vegan)
p1 <- rda(DS_data[,4:7])
summary(p1)
biplot(p1)
tr <- sort(unique(DS_data$Treatment))
Treatments <- tr[match(DS_data$Treatment, tr)]
cols <- c("red", "pink", "lightblue", "blue")
px <- scores(p1)$sites
vx <- scores(p1)$species
ggplot()+
geom_point(data=px, aes(x=PC1, y=PC2, color=Species))+
scale_color_manual(values = cols)+
geom_segment(data = vx, aes(x=0, y=0, xend=PC1, yend=PC2), color = "red")+
annotate("text", x=vx[,1], y=vx[,2], label = rownames(vx))+
xlab("PC1 (42.5%)")+
ylab("PC2 (13.6%)")+
theme_bw()
ggplot()+
geom_point(data=px, aes(x=PC1, y=PC2, color=Treatment))+
scale_color_manual(values = cols)+
geom_segment(data = vx, aes(x=0, y=0, xend=PC1, yend=PC2), color = "red")+
annotate("text", x=vx[,1], y=vx[,2], label = rownames(vx))+
xlab("PC1 (42.5%)")+
ylab("PC2 (13.6%)")+
theme_bw()
ggplot()+
geom_point(data=px, aes(x=PC1, y=PC2, color=Treatments))+
scale_color_manual(values = cols)+
geom_segment(data = vx, aes(x=0, y=0, xend=PC1, yend=PC2), color = "red")+
annotate("text", x=vx[,1], y=vx[,2], label = rownames(vx))+
xlab("PC1 (42.5%)")+
ylab("PC2 (13.6%)")+
theme_bw()
View(vx)
ggplot()+
geom_point(data=px, aes(x=PC1, y=PC2, color=Treatments))+
scale_color_manual(values = cols)+
geom_segment(data = vx, aes(x=0, y=0, xend=PC1*.5, yend=PC2*.5), color = "red")+
annotate("text", x=vx[,1], y=vx[,2], label = rownames(vx))+
xlab("PC1 (42.5%)")+
ylab("PC2 (13.6%)")+
theme_bw()
ggplot()+
geom_point(data=px, aes(x=PC1, y=PC2, color=Treatments))+
scale_color_manual(values = cols)+
geom_segment(data = vx, aes(x=0, y=0, xend=PC1*.5, yend=PC2*.5), color = "red")+
annotate("text", x=vx[,1]*.5, y=vx[,2]*.5, label = rownames(vx))+
xlab("PC1 (42.5%)")+
ylab("PC2 (13.6%)")+
theme_bw()
ggplot()+
geom_point(data=px, aes(x=PC1, y=PC2, color=Treatments))+
scale_color_manual(values = four_colors)+
geom_segment(data = vx, aes(x=0, y=0, xend=PC1*.3, yend=PC2*.3), color = "red")+
annotate("text", x=vx[,1]*.3, y=vx[,2]*.3, label = rownames(vx))+
xlab("PC1 (42.5%)")+
ylab("PC2 (13.6%)")+
theme_bw()
ggplot()+
geom_point(data=px, aes(x=PC1, y=PC2, color=Treatments))+
scale_color_manual(values = cols)+
geom_segment(data = vx, aes(x=0, y=0, xend=PC1*.3, yend=PC2*.3), color = "red")+
annotate("text", x=vx[,1]*.3, y=vx[,2]*.3, label = rownames(vx))+
xlab("PC1 (42.5%)")+
ylab("PC2 (13.6%)")+
theme_bw()
ggplot()+
geom_point(data=px, aes(x=PC1, y=PC2, color=Treatments))+
scale_color_manual(values = cols)+
geom_segment(data = vx, aes(x=0, y=0, xend=PC1*.3, yend=PC2*.3), color = "black")+
annotate("text", x=vx[,1]*.3, y=vx[,2]*.3, label = rownames(vx))+
xlab("PC1 (42.5%)")+
ylab("PC2 (13.6%)")+
theme_bw()
ggplot()+
geom_point(data=px, aes(x=PC1, y=PC2, color=Treatments))+
scale_color_manual(values = cols)+
geom_segment(data = vx, aes(x=0, y=0, xend=PC1*.3, yend=PC2*.3), color = "black")+
annotate("text", x=vx[,1]*.25, y=vx[,2]*.25, label = rownames(vx))+
xlab("PC1 (42.5%)")+
ylab("PC2 (13.6%)")+
theme_bw()
ggplot()+
geom_point(data=px, aes(x=PC1, y=PC2, color=Treatments))+
scale_color_manual(values = cols)+
geom_segment(data = vx, aes(x=0, y=0, xend=PC1*.25, yend=PC2*.25), color = "black")+
annotate("text", x=vx[,1]*.25, y=vx[,2]*.25, label = rownames(vx))+
xlab("PC1 (42.5%)")+
ylab("PC2 (13.6%)")+
theme_bw()
ggplot()+
geom_point(data=px, aes(x=PC1, y=PC2, color=Treatments))+
scale_color_manual(values = cols)+
geom_segment(data = vx, aes(x=0, y=0, xend=PC1*.2, yend=PC2*.2), color = "black")+
annotate("text", x=vx[,1]*.25, y=vx[,2]*.25, label = rownames(vx))+
xlab("PC1 (42.5%)")+
ylab("PC2 (13.6%)")+
theme_bw()
ggplot()+
geom_point(data=px, aes(x=PC1, y=PC2, color=Treatments))+
scale_color_manual(values = cols)+
geom_segment(data = vx, aes(x=0, y=0, xend=PC1*.225, yend=PC2*.225), color = "black")+
annotate("text", x=vx[,1]*.25, y=vx[,2]*.25, label = rownames(vx))+
xlab("PC1 (42.5%)")+
ylab("PC2 (13.6%)")+
theme_bw()
ggplot()+
geom_point(data=px, aes(x=PC1, y=PC2, color=Treatments))+
scale_color_manual(values = cols)+
geom_segment(data = vx, aes(x=0, y=0, xend=PC1*.225, yend=PC2*.225), color = "black")+
annotate("text", x=vx[,1]*.25, y=vx[,2]*.25, label = rownames(vx))+
labs(title=str_wrap("Principal Component Analysis for Tomato Destructive Sampling Metrics", 40))+
xlab("PC1 (42.5%)")+
ylab("PC2 (13.6%)")+
theme_bw()
ggplot()+
geom_point(data=px, aes(x=PC1, y=PC2, color=Treatments))+
scale_color_manual(values = cols)+
geom_segment(data = vx, aes(x=0, y=0, xend=PC1*.225, yend=PC2*.225), color = "black")+
annotate("text", x=vx[,1]*.25, y=vx[,2]*.25, label = rownames(vx))+
labs(title=str_wrap("Principal Component Analysis for Tomato Destructive Sampling Metrics", 40))+
xlab("PC1 (42.5%)")+
ylab("PC2 (13.6%)")+
theme_bw()+
theme(
text = element_text(size=subtitle_size, family="mont", lineheight=0.8),
axis.title = element_text(size=subtitle_size, family = "mont", face= "bold"),
title = element_text(size=title_size, family="open", face="bold")
)
ggplot()+
geom_point(data=px, aes(x=PC1, y=PC2, color=Treatments), size=3)+
scale_color_manual(values = cols)+
geom_segment(data = vx, aes(x=0, y=0, xend=PC1*.225, yend=PC2*.225), color = "black")+
annotate("text", x=vx[,1]*.25, y=vx[,2]*.25, label = rownames(vx))+
labs(title=str_wrap("Principal Component Analysis for Tomato Destructive Sampling Metrics", 40))+
xlab("PC1 (42.5%)")+
ylab("PC2 (13.6%)")+
theme_bw()+
theme(
text = element_text(size=subtitle_size, family="mont", lineheight=0.8),
axis.title = element_text(size=subtitle_size, family = "mont", face= "bold"),
title = element_text(size=title_size, family="open", face="bold")
)
ggplot()+
geom_point(data=px, aes(x=PC1, y=PC2, color=Treatments, shape=Treatments), size=3)+
scale_color_manual(values = cols)+
geom_segment(data = vx, aes(x=0, y=0, xend=PC1*.225, yend=PC2*.225), color = "black")+
annotate("text", x=vx[,1]*.25, y=vx[,2]*.25, label = rownames(vx))+
labs(title=str_wrap("Principal Component Analysis for Tomato Destructive Sampling Metrics", 40))+
xlab("PC1 (42.5%)")+
ylab("PC2 (13.6%)")+
theme_bw()+
theme(
text = element_text(size=subtitle_size, family="mont", lineheight=0.8),
axis.title = element_text(size=subtitle_size, family = "mont", face= "bold"),
title = element_text(size=title_size, family="open", face="bold")
)
ggplot()+
geom_point(data=px, aes(x=PC1, y=PC2, color=Treatments, shape=Treatments), size=3)+
scale_color_manual(values = four_colors)+
geom_segment(data = vx, aes(x=0, y=0, xend=PC1*.225, yend=PC2*.225), color = "black")+
annotate("text", x=vx[,1]*.25, y=vx[,2]*.25, label = rownames(vx))+
labs(title=str_wrap("Principal Component Analysis for Tomato Destructive Sampling Metrics", 40))+
xlab("PC1 (42.5%)")+
ylab("PC2 (13.6%)")+
theme_bw()+
theme(
text = element_text(size=subtitle_size, family="mont", lineheight=0.8),
axis.title = element_text(size=subtitle_size, family = "mont", face= "bold"),
title = element_text(size=title_size, family="open", face="bold")
)
ggplot()+
geom_point(data=px, aes(x=PC1, y=PC2, color=Treatments, shape=Treatments), size=3)+
scale_color_manual(values = four_colors)+
scale_shape_manual(values = four_shapes)+
geom_segment(data = vx, aes(x=0, y=0, xend=PC1*.225, yend=PC2*.225), color = "black")+
annotate("text", x=vx[,1]*.25, y=vx[,2]*.25, label = rownames(vx))+
labs(title=str_wrap("Principal Component Analysis for Tomato Destructive Sampling Metrics", 40))+
xlab("PC1 (42.5%)")+
ylab("PC2 (13.6%)")+
theme_bw()+
theme(
text = element_text(size=subtitle_size, family="mont", lineheight=0.8),
axis.title = element_text(size=subtitle_size, family = "mont", face= "bold"),
title = element_text(size=title_size, family="open", face="bold")
)
ggplot()+
geom_point(data=px, aes(x=PC1, y=PC2, color=Treatments, shape=Treatments, fill=Treatments), size=3)+
scale_color_manual(values = four_colors)+
scale_fill_manual(values = four_colors)+
scale_shape_manual(values = four_shapes)+
geom_segment(data = vx, aes(x=0, y=0, xend=PC1*.225, yend=PC2*.225), color = "black")+
annotate("text", x=vx[,1]*.25, y=vx[,2]*.25, label = rownames(vx))+
labs(title=str_wrap("Principal Component Analysis for Tomato Destructive Sampling Metrics", 40))+
xlab("PC1 (42.5%)")+
ylab("PC2 (13.6%)")+
theme_bw()+
theme(
text = element_text(size=subtitle_size, family="mont", lineheight=0.8),
axis.title = element_text(size=subtitle_size, family = "mont", face= "bold"),
title = element_text(size=title_size, family="open", face="bold")
)
ggplot()+
geom_point(data=px, aes(x=PC1, y=PC2, color=Treatments, shape=Treatments, fill=Treatments), size=3)+
scale_color_manual(values = four_colors)+
scale_fill_manual(values = four_colors)+
scale_shape_manual(values = four_shapes)+
geom_segment(data = vx, aes(x=0, y=0, xend=PC1*.225, yend=PC2*.225), color = "black")+
annotate("text", x=vx[,1]*.25, y=vx[,2]*.25, label = rownames(vx))+
labs(title=str_wrap("Principal Component Analysis for Tomato Destructive Sampling Metrics", 40))+
xlab("PC1 (42.5%)")+
ylab("PC2 (13.6%)")+
theme_bw()+
theme(
text = element_text(size=subtitle_size, family="mont", lineheight=0.8),
axis.title = element_text(size=subtitle_size, family = "mont", face= "bold"),
title = element_text(size=title_size, family="open", face="bold")
)
summary(p1)
ggplot()+
geom_point(data=px, aes(x=PC1, y=PC2, color=Treatments, shape=Treatments, fill=Treatments), size=3)+
scale_color_manual(values = four_colors)+
scale_fill_manual(values = four_colors)+
scale_shape_manual(values = four_shapes)+
geom_segment(data = vx, aes(x=0, y=0, xend=PC1*.225, yend=PC2*.225), color = "black")+
annotate("text", x=vx[,1]*.25, y=vx[,2]*.25, label = rownames(vx))+
labs(title=str_wrap("Principal Component Analysis for Tomato Destructive Sampling Metrics", 40))+
xlab("PC1 (67.76%)")+
ylab("PC2 (31.41%)")+
theme_bw()+
theme(
text = element_text(size=subtitle_size, family="mont", lineheight=0.8),
axis.title = element_text(size=subtitle_size, family = "mont", face= "bold"),
title = element_text(size=title_size, family="open", face="bold")
)
ggplot()+
geom_point(data=px, aes(x=PC1, y=PC2, color=Treatments, shape=Treatments, fill=Treatments), size=3)+
scale_color_manual(values = four_colors)+
scale_fill_manual(values = four_colors)+
scale_shape_manual(values = four_shapes)+
geom_segment(data = vx, aes(x=0, y=0, xend=PC1*.225, yend=PC2*.225), color = "black")+
annotate("text", x=vx[,1]*.25, y=vx[,2]*.25, label = rownames(vx))+
labs(title=str_wrap("Principal Component Analysis for Tomato Destructive Sampling Metrics", 40))+
xlab("PC1 (67.76%)")+
ylab("PC2 (31.41%)")+
theme_bw()+
theme(
text = element_text(size=subtitle_size, family="mont", lineheight=0.8),
axis.title = element_text(size=subtitle_size, family = "mont", face= "bold"),
title = element_text(size=title_size, family="open", face="bold")
)
summary(model_RSL <- (lmer(
RS_Length ~ Treatment + (1|Row),
data = DS_data)))
summary(model_RSM <- (lmer(
RS_Mass ~ Treatment + (1|Row),
data = DS_data)))
summary(model_RSL <- (lm(
RS_Length ~ Treatment,
data = DS_data)))
summary(model_RSM <- (lm(
RS_Mass ~ Treatment,
data = DS_data)))
# RS_length
multiPDF_Z(DS_data$RS_Length, 100, "all", a_palette, "R:S Length")
multiKS_cont(DS_data$RS_Length, "all")
# RS_length
multiPDF_Z(DS_data$RS_Length, 100, "all", a_palette, "R:S Length")
summary(model_RSL <- (lm(
logit(RS_Length) ~ Treatment,
data = DS_data)))
summary(model_RSM <- (lmer(
logit(RS_Mass) ~ Treatment,
data = DS_data)))
summary(model_RSM <- (lm(
logit(RS_Mass) ~ Treatment,
data = DS_data)))
shiny::runApp('C:/Github/Rsweeper/RSweeper')
runApp('C:/Github/Rsweeper/RSweeper')
runApp('C:/Github/Rsweeper/RSweeper')
runApp('C:/Github/Rsweeper/RSweeper')
runApp('C:/Github/Rsweeper/RSweeper')
sample(1:(5*5))
sample(1:(5*5), 2)
sample(1:(5*5), 2)
sample(1:(5*5), 2)
sample(1:(5*5), 2)\
sample(1:(5*5), 2)\
sample(1:(5*5), 2)
matrix(0, 5, 5)
matrix(FALSE, 5, 5)
matrix(0, 5, 5)[sample(1:(5*5), 5)] <- -1
matrix(0, 5, 5)[sample(1:(5*5), 5)]
matrix(0, 5, 5)[sample(1:(5*5), 5)]
matrix(0, 5, 5)[sample(1:(5*5), 5)]
matrix(0, 5, 5)[sample(1:(5*5), 5)]
matrix(0, 5, 5)[sample(1:(5*5), 5)]
matrix(0, 5, 5)[sample(1:(5*5), 5)]
matrix(0, 5, 5)[sample(1:(5*5), 5)]
matrix(0, 5, 5)[sample(1:(5*5), 5)]
matrix(0, 5, 5)[sample(1:(5*5), 5)]
matrix(0, 5, 5)[sample(1:(5*5), 5)]
matrix(0, 5, 5)[sample(1:(5*5), 5)]
matrix(0, 5, 5)[sample(1:(5*5), 5)]
matrix(0, 5, 5)[sample(1:(5*5), 5)]
matrix(0, 5, 5)[sample(1:(5*5), 5)]
matrix(0, 5, 5)[sample(1:(5*5), 5)]
matrix(0, 5, 5)[sample(1:(5*5), 5)]
matrix(0, 5, 5)[sample(1:(5*5), 5)]
matrix(0, 5, 5)[sample(1:(5*5), 5)]
matrix(0, 5, 5)[sample(1:(5*5), 5)]
matrix(0, 5, 5)[sample(1:(5*5), 5)]
matrix(0, 5, 5)[sample(1:(5*5), 5)]
matrix(0, 5, 5)[sample(1:(5*5), 5)]
matrix(0, 5, 5)[sample(1:(5*5), 5)]
matrix(0, 5, 5)[sample(1:(5*5), 5)]
matrix(0, 5, 5)[sample(1:(5*5), 5)]
matrix(0, 5, 5)[sample(1:(5*5), 5)]
matrix(0, 5, 5)[sample(1:(5*5), 5)]
matrix(0, 5, 5)[sample(1:(5*5), 5)]
matrix(0, 5, 5)[sample(1:(5*5), 5)]
matrix(0, 5, 5)[sample(1:(5*5), 5)]
tgrid <- matrix(0, 5, 5)
View(tgrid)
tmpos <- sample(1:(5*5), 5)
tgrid[tmpos] <- -1
View(tgrid)
runApp('C:/Github/Rsweeper/RSweeper')
runApp('C:/Github/Rsweeper/RSweeper')
runApp('C:/Github/Rsweeper/RSweeper')
runApp('C:/Github/Rsweeper/RSweeper')
# Run the application
shinyApp(ui = ui, server = server)
runApp('C:/Github/Rsweeper/test')
runApp('C:/Github/Rsweeper/test')
runApp('C:/Github/Rsweeper/test')
runApp('C:/Github/Rsweeper/test')
runApp('C:/Github/Rsweeper/test')
runApp('C:/Github/Rsweeper/test')
runApp('C:/Github/Rsweeper/test')
runApp('C:/Github/Rsweeper/test')
runApp('C:/Github/Rsweeper/test')
runApp('C:/Github/Rsweeper/test')
runApp('C:/Github/Rsweeper/test')
runApp('C:/Github/Rsweeper/test')
runApp('C:/Github/Rsweeper/test')
runApp('C:/Github/Rsweeper/test')
runApp('C:/Github/Rsweeper/test')
runApp('C:/Github/Rsweeper/test')
runApp('C:/Github/Rsweeper/test')
runApp('C:/Github/Rsweeper/test')
runApp('C:/Github/Rsweeper/test')
runApp('C:/Github/Rsweeper/test')
runApp('C:/Github/Rsweeper/test')
runApp('C:/Github/Rsweeper/test')
runApp('C:/Github/Rsweeper/test')
runApp('C:/Github/Rsweeper/test')
runApp('C:/Github/Rsweeper/test')
runApp('C:/Github/Rsweeper/test')
runApp('C:/Github/Rsweeper/RSweeper')
runApp('C:/Github/Rsweeper/test')
runApp('C:/Github/Rsweeper/test')
runApp('C:/Github/Rsweeper/test')
runApp('C:/Github/Rsweeper/test')
runApp('C:/Github/Rsweeper/RSweeper')
runApp('C:/Github/Rsweeper/RSweeper')
runApp('C:/Github/Rsweeper/RSweeper')
runApp('C:/Github/Rsweeper/RSweeper')
runApp('C:/Github/Rsweeper/RSweeper')
runApp('C:/Github/Rsweeper/RSweeper')
runApp('C:/Github/Rsweeper/RSweeper')
runApp('C:/Github/Rsweeper/RSweeper')
runApp('C:/Github/Rsweeper/RSweeper')
runApp('C:/Github/Rsweeper/RSweeper')
runApp('C:/Github/Rsweeper/RSweeper')
runApp('C:/Github/Rsweeper/RSweeper')
runApp('C:/Github/Rsweeper/RSweeper')
runApp('C:/Github/Rsweeper/RSweeper')
runApp('C:/Github/Rsweeper/RSweeper')
shiny::runApp('C:/Github/tomato-inoculant-app/app')
gc()
bb_data <- read.csv("C:/Github/Thesis/data/BB_3212025.csv")
View(bb_data)
bb_data2 <- na.omit(bb_data)
View(bb_data2)
ggplot(bb_data2, aes(x=elapsed_weeks, y=end_weight))+
geom_jitter()
ggplot(bb_data2, aes(x=elapsed_weeks, y=end_weight, color = medium))+
geom_jitter()
ggplot(bb_data2, aes(x=elapsed_weeks, y=end_weight, color = polymer))+
geom_jitter()
runApp('C:/Github/tomato-inoculant-app/app')
runApp('C:/Github/tomato-inoculant-app/app')
# load data
load("data_gsw.RData")
runApp('C:/Github/tomato-inoculant-app/app')
runApp('C:/Github/tomato-inoculant-app/app')
setwd("C:/Github/tomato-inoculant-app/app")
# load data
load("data_gsw.RData")
data_gsw$Time <- as.POSIXct(data_gsw$Time, format = "%H:%M:%OS")
runApp()
microbenchmark::microbenchmark(data_gsw$Time <- as.POSIXct(data_gsw$Time, format = "%H:%M:%OS"))
# load data
load("data_gsw.RData")
runApp()
test <- hms::as_hms(data_gsw$Time)
library(hms)
test <- hms(data_gsw$Time)
test <- as_hms(data_gsw$Time)
test <- is_hms(data_gsw$Time)
test <- as_hms(as.numeric(data_gsw$Time))
test <- as.POSIXct(data_gsw$Time, format = "%H:%M:%OS")
test2 <- as_hms(test)
test2 <- hms(test)
test2 <- hms(data_gsw$Time)
library(lubridate)
test2 <- hms(data_gsw$Time)
runApp()
install.packages("chron")
library(chron)
library(chron)
test <- as.chron(data_gsw$Time)
test <- times(data_gsw$Time)
runApp()
test <- strptime(data_gsw$Time, format = "%H:%M:%S")
View(test)
library(data.table)
test <- as.ITime(data_gsw$Time)
runApp()
runApp()
runApp()
runApp()
runApp()
test <- as.POSIXct(gata_gsw$Date)
test <- as.POSIXct(data_gsw$Date)
runApp()
runApp()
runApp()
# load data
load("data_gsw.RData")
load("data_fruit.RData")
load("data_ps2.RData")
data_gsw$Date <- as.character(data_gsw$Date)
save(data_gsw, file="C:/Github/tomato-inoculant-app/app/data_gsw.RData")
View(data_gsw)
runApp()
data_gsw$Time <- as.factor(data_gsw$Time)
data_gsw$Date <- as.factor(data_gsw$Date)
runApp()
save(data_gsw, file="C:/Github/tomato-inoculant-app/app/data_gsw.RData")
data_fruit$DateHarvest <- as.factor(data_fruit$DateHarvest)
data_fruit$DateAnalysis <- as.factor(data_fruit$DateAnalysis)
data_ps2$Date <- as.factor(data_ps2$Date)
data_ps2$Time <- as.factor(data_ps2$Time)
View(data_ps2)
save(data_fruit, file="C:/Github/tomato-inoculant-app/app/data_fruit.RData")
save(data_ps2, file="C:/Github/tomato-inoculant-app/app/data_ps2.RData")
runApp()
runApp()
runApp()
